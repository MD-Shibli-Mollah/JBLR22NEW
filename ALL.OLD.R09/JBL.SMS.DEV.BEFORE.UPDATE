*-----------------------------------------------------------------------------
* <Rating>349</Rating>
*-----------------------------------------------------------------------------
****************************************************************************************************************
*Objective: This subroutine read parameters(application wise) from EB.SMS.TEMPLATE and build SMS string based  *
*on SMS TEXT and SMS VARIABLE defined on EB.SMS.TEMPLATE.Then write that SMS in SMS.OUT folder.This message    *
*will be send to SMS TARGET on SMS EVENT defined on EB.SMS.TEMPLATE.                                           *
*Developer: Md. Zahid Hasan                                                                                    *
*Release Date: 16-FEB-2016                                                                                     *
*Update History:2017-05-15 By Md. Imran Hasan  (Check Collection for Clearing module)                                                                                            *
****************************************************************************************************************
    SUBROUTINE JBL.SMS.DEV

    $INSERT GLOBUS.BP I_COMMON
    $INSERT GLOBUS.BP I_EQUATE
    $INSERT JBL.BP I_F.SMS.TEMPLATE.DEFINE
    $INSERT GLOBUS.BP I_F.STANDARD.SELECTION
    $INSERT GLOBUS.BP I_F.CUSTOMER
    $INSERT GLOBUS.BP I_F.COMPANY
    $INSERT GLOBUS.BP I_F.TELLER
    $INSERT GLOBUS.BP I_F.FUNDS.TRANSFER
    $INSERT GLOBUS.BP I_F.TRANSACTION
    $INSERT GLOBUS.BP I_F.CHEQUE.COLLECTION
    $INSERT GLOBUS.BP I_F.ACCOUNT

    GOSUB INIT
    GOSUB OPENFILES
    GOSUB PROCESS
    RETURN

*--------
INIT:
*--------
    FN.SMS = 'F.EB.SMS.TEMPLATE.DEFINE'
    F.SMS = ''
    FN.CUS = 'F.CUSTOMER'
    F.CUS = ''
    FN.COM = 'F.COMPANY'
    F.COM = ''

!add by Imran
    FN.TXN = 'F.TRANSACTION'
    F.TXN = ''
    FN.CC = 'FBNK.CHEQUE.COLLECTION'
    F.CC = ''
    FN.ACCT = 'FBNK.ACCOUNT'
    F.ACCT = ''
!add by Imran

    SMS.BUILD = ''
    SMS.DIR = 'SMS.OUT'
    DR.CR.IND = ''
    RETURN

*----------
OPENFILES:
*----------
    CALL OPF(FN.SMS,F.SMS)
    CALL F.READ(FN.SMS,APPLICATION,R.SMS,F.SMS,ERR.SMS)
    CALL GET.STANDARD.SELECTION.DETS(APPLICATION,R.SS)
    CALL GET.LOC.REF('CUSTOMER','SMS.ALERT',CUS.SMS.ALERT.POS)
    CALL GET.LOC.REF('COMPANY','SMS.ALERT',COM.SMS.ALERT.POS)
!add by Imran
    CALL OPF(FN.TXN,F.TXN)
    CALL OPF(FN.CC,F.CC)
    CALL OPF(FN.ACCT,F.ACCT)
!add by Imran

    RETURN

*----------
PROCESS:
*----------
    IF APPLICATION EQ 'TELLER' THEN
        DR.CR.IND = R.NEW(TT.TE.DR.CR.MARKER)
        Y.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
    END
    IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
        Y.AMT = R.NEW(FT.DEBIT.AMOUNT)
        Y.TRNS.TYPE = R.NEW(FT.TRANSACTION.TYPE)
        IF Y.AMT EQ '' THEN
            Y.AMT = R.NEW(FT.CREDIT.AMOUNT)
        END
    END
!add by Imran
    IF APPLICATION EQ 'CHEQUE.COLLECTION' THEN
        Y.TXN.CODE = R.NEW(CHQ.COL.TXN.CODE)
        CALL F.READ(FN.TXN,Y.TXN.CODE,R.TXN,F.TXN,ERR.TXN)
        DR.CR.IND = R.TXN<AC.TRA.DEBIT.CREDIT.IND>
        Y.AMT = R.NEW(CHQ.COL.AMOUNT)
    END
!add by Imran

    IF R.SMS THEN
        IF R.SMS<EB.SMS7.SMS.EVENT> EQ '' THEN
            SMS.COUNT = 1
        END
        ELSE
            SMS.COUNT = DCOUNT(R.SMS<EB.SMS7.SMS.EVENT>,@VM)
        END
        EVENT.CHECK = 0
        FOR J=1 TO SMS.COUNT

            IF R.SMS<EB.SMS7.SMS.TARGET,J> EQ '@ID' THEN
                CALL F.READ(FN.CUS,ID.NEW,R.CUS,F.CUS,E.CUS)
                MOBILE.NO = R.CUS<EB.CUS.SMS.1,1>
                SMS.ALERT.VAL = R.CUS<EB.CUS.LOCAL.REF,CUS.SMS.ALERT.POS>
                COM.BOOK.VAL = R.CUS<EB.CUS.COMPANY.BOOK>
            END
            ELSE
!add by Imran
                IF APPLICATION EQ 'CHEQUE.COLLECTION' THEN
                    Y.ACCT.ID = R.NEW(CHQ.COL.CREDIT.ACC.NO)
                    CALL F.READ(FN.ACCT,Y.ACCT.ID,R.ACCT,F.ACCT,ERR.ACCT)
                    SMS.TARGET = R.ACCT<AC.CUSTOMER>
                END
!add by Imran
                ELSE

                    LOCATE FIELD(R.SMS<EB.SMS7.SMS.TARGET>,@VM,J) IN R.SS<SSL.SYS.FIELD.NAME,1> SETTING POS2 THEN
                        AF = R.SS<SSL.SYS.FIELD.NO,POS2>
                        SMS.TARGET = R.NEW(AF)
                    END
                END
                CALL F.READ(FN.CUS,SMS.TARGET,R.CUS,F.CUS,E.CUS)
                MOBILE.NO = R.CUS<EB.CUS.SMS.1,1>
                SMS.ALERT.VAL = R.CUS<EB.CUS.LOCAL.REF,CUS.SMS.ALERT.POS>
                COM.BOOK.VAL = R.CUS<EB.CUS.COMPANY.BOOK>
            END
            CALL F.READ(FN.COM,COM.BOOK.VAL,R.COM,F.COM,E.COM)
            COM.SMS.ALERT.VAL = R.COM<EB.COM.LOCAL.REF,COM.SMS.ALERT.POS>

            IF COM.SMS.ALERT.VAL EQ 'Y' AND SMS.ALERT.VAL EQ 'Y' AND MOBILE.NO NE '' THEN
                GOSUB BUILD.MSG
            END
            EVENT.CHECK =1
        NEXT
    END
    RETURN
*----------
BUILD.MSG:
*----------
    SMS.TXT.NO = DCOUNT(R.SMS<EB.SMS7.SMS.TEXT,J>,@SM)
    FOR I=1 TO SMS.TXT.NO
        SMS.TXT = FIELD(R.SMS<EB.SMS7.SMS.TEXT,J>,@SM,I)
        SMS.FLD = FIELD(R.SMS<EB.SMS7.SMS.VARIABLE,J>,@SM,I)
        LOCATE SMS.FLD IN R.SS<SSL.SYS.FIELD.NAME,1> SETTING POS1 THEN
            AF = R.SS<SSL.SYS.FIELD.NO,POS1>
            SMS.VAR = R.NEW(AF)
            IF FIELD (R.SMS<EB.SMS7.VAR.CONVERSION,J>,@SM,I) EQ 'MASKING' THEN
                TEMP.SMS.VAR = SMS.VAR[LEN(SMS.VAR)-3,4]
                SMS.VAR = FMT(TEMP.SMS.VAR,'R*':LEN(SMS.VAR))
            END
            IF APPLICATION EQ 'TELLER' AND FIELD(SMS.FLD,'.',1) EQ 'ACCOUNT' AND DR.CR.IND NE R.SMS<EB.SMS7.SMS.EVENT,1> THEN
                IF EVENT.CHECK EQ 0 THEN
                    SMS.TXT = FIELD(R.SMS<EB.SMS7.SMS.TEXT,J+1>,@SM,I)
                END
                ELSE
                    SMS.TXT = FIELD(R.SMS<EB.SMS7.SMS.TEXT,J-1>,@SM,I)
                END
            END
            ELSE
                IF SMS.FLD EQ 'CO.CODE' THEN
                    SMS.VAR = R.COMPANY(1)[1,30]
                END
                ELSE
                    IF SMS.FLD EQ 'DATE.TIME' THEN
                        SMS.VAR = OCONV(DATE(),'D2'):' ':OCONV(TIME(),'MTS')
                    END
                END
            END
        END
        SMS.BUILD:= SMS.TXT:' ':SMS.VAR:' '
    NEXT
    Y.PRIORITY.CNT = DCOUNT(R.SMS<EB.SMS7.PRIORITY>,@VM)
    FOR I=1 TO Y.PRIORITY.CNT
        IF Y.AMT GE R.SMS<EB.SMS7.AMT.FROM,I> AND Y.AMT LE R.SMS<EB.SMS7.AMT.TO,I> THEN
            Y.PRIORITY = R.SMS<EB.SMS7.PRIORITY,I>
            I = Y.PRIORITY.CNT +1
        END
    NEXT I
    FINDSTR 'deposited' IN SMS.BUILD SETTING POS THEN
        Y.ID= ID.NEW:"-C"
    END ELSE
        Y.ID= ID.NEW:"-D"
    END

    Y.DEBIT.COMP = R.NEW(FT.DEBIT.COMP.CODE)
    Y.CREDIT.COMP = R.NEW(FT.CREDIT.COMP.CODE)

    IF Y.TRNS.TYPE EQ 'ACAT' THEN
        SMS.BUILD = Y.ID:"|":MOBILE.NO:"|":SMS.BUILD:"through ATM":"|":"1":"|":Y.PRIORITY
    END ELSE
        IF Y.DEBIT.COMP NE Y.CREDIT.COMP THEN
            FINDSTR 'deposited' IN SMS.BUILD SETTING POS THEN
                SMS.BUILD = EREPLACE(SMS.BUILD,"with","through")
                SMS.BUILD = Y.ID:"|":MOBILE.NO:"|":SMS.BUILD:"|":"1":"|":Y.PRIORITY
            END ELSE
                SMS.BUILD = Y.ID:"|":MOBILE.NO:"|":SMS.BUILD:"|":"1":"|":Y.PRIORITY
            END
        END ELSE
            SMS.BUILD = Y.ID:"|":MOBILE.NO:"|":SMS.BUILD:"|":"1":"|":Y.PRIORITY
        END
    END

    IF SMS.BUILD THEN
!IF V$FUNCTION EQ 'R' THEN
!SMS.BUILD = EREPLACE(SMS.BUILD,"deposited","reversed")
!SMS.BUILD = EREPLACE(SMS.BUILD,"withdraw","reversed")
!END
        Y.CUR = 0
        IF SUBSTRINGS(ID.NEW,0,2) EQ 'TT' THEN
            Y.CUR = R.NEW(TT.TE.CURR.NO)
        END
        IF SUBSTRINGS(ID.NEW,0,2) EQ 'FT' THEN
            Y.CUR = R.NEW(FT.CURR.NO)
        END
        IF SUBSTRINGS(ID.NEW,0,2) EQ 'CC' THEN
            Y.CUR = R.NEW(CHQ.COL.CURR.NO)
        END

        IF V$FUNCTION EQ 'A' AND Y.CUR EQ 1 OR Y.TRNS.TYPE EQ 'ACAT' OR (APPLICATION EQ 'CHEQUE.COLLECTION' AND Y.CUR EQ 2) THEN
            SMS.FILE = SMS.DIR:'/':MOBILE.NO:'-':ID.NEW:'-':J:V$FUNCTION:'.csv'
            OPENSEQ SMS.FILE TO SMS.FILE.POINT ELSE
                CRT 'OPEN FAILED'
            END
            WRITESEQ SMS.BUILD TO SMS.FILE.POINT ELSE
                CRT 'WRITE FAILED'
            END
            CLOSESEQ SMS.FILE.POINT
        END
    END
    Y.CUR = ''
    SMS.BUILD = ''
    RETURN
END
