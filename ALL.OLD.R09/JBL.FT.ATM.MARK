*-----------------------------------------------------------------------------
* THIS ROUTINE USE FUNDS TRANSFER CHECK VALID FT AND MARK CRMS

*Deploy Date: 12 JAN 2017
*-----------------------------------------------------------------------------
    SUBROUTINE JBL.FT.ATM.MARK
!PROGRAM JBL.FT.ATM.MARK

    $INSERT GLOBUS.BP I_COMMON
    $INSERT GLOBUS.BP I_EQUATE
    $INSERT GLOBUS.BP I_F.ACCOUNT
    $INSERT BP I_F.ATM.CARD.MGT
    $INSERT GLOBUS.BP I_F.FUNDS.TRANSFER
    $INSERT BP I_F.JBL.ATM.MAINT.CALC
    $INSERT GLOBUS.BP I_F.FT.COMMISSION.TYPE
    $INCLUDE BP I_F.JBL.CARD.OFF.INFO

    FN.ATM.NAU="F.EB.ATM.CARD.MGT$NAU"
    F.ATM.NAU=""
    FN.FT = "F.FUNDS.TRANSFER"
    F.FT = ""
    FN.JBL.ATM='F.JBL.ATM.MAINT.CALC'
    F.JBL.ATM=''
    FN.ACC='F.ACCOUNT'
    F.ACC=''
    FN.COMM="F.FT.COMMISSION.TYPE"
    F.COMM=''
    FN.FT.NAU = "F.FUNDS.TRANSFER$NAU"
    F.FT.NAU = ""
    FN.FT.HIS = "F.FUNDS.TRANSFER$HIS"
    F.FT.HIS = ""
    FN.CARD.OFF = "F.JBL.CARD.OFF.INFO"
    F.CARD.OFF = ""
    CALL OPF(FN.FT,F.FT)
    CALL OPF(FN.FT.NAU,F.FT.NAU)
    CALL OPF(FN.FT.HIS,F.FT.HIS)
    CALL OPF(FN.ATM.NAU,F.ATM.NAU)
    CALL OPF(FN.JBL.ATM,F.JBL.ATM)
    CALL OPF(FN.ACC,F.ACC)
    CALL OPF(FN.COMM,F.COMM)
    CALL OPF(FN.CARD.OFF,F.CARD.OFF)

    CALL GET.LOC.REF('FUNDS.TRANSFER','CARD.MRK.FT',Y.CARD.MRK.FT)
    Y.ATM.ID=R.NEW(FT.LOCAL.REF)<1,Y.CARD.MRK.FT>

    CALL F.READ(FN.ATM.NAU,Y.ATM.ID,R.ATM.REC,F.ATM.NAU,Y.ERR)
    Y.REQUEST.TYPE=R.ATM.REC<EB.ATM19.REQUEST.TYPE>
    Y.AC.ID=R.ATM.REC<EB.ATM19.ACCT.NO>

    CALL F.READ(FN.ACC,Y.AC.ID,REC.ACC,F.ACC,ERR.ACC)
    Y.CATEGORY=REC.ACC<AC.CATEGORY>

    CALL F.READ(FN.CARD.OFF,Y.AC.ID,REC.OPP,F.CARD.OFF,ERR.OPP)
    Y.CARD.OFFER.VAL=REC.OPP<JBL.CARD.OFF.CARD.OFFER>

    CALL F.READ(FN.JBL.ATM,Y.REQUEST.TYPE,REC.ATM.CHRG,F.JBL.ATM,ERR.CDSTD.HF)
    IF REC.ATM.CHRG EQ '' THEN
        ETEXT="There must be a record ": Y.REQUEST.TYPE :" in JBL.ATM.MAINT.CALC"
        CALL STORE.END.ERROR
        RETURN
    END
    Y.INCLUDE.CATEGORY=REC.ATM.CHRG<ATM.MAINT.INCLUDE.CATEGORY>

    FIND Y.CATEGORY IN Y.INCLUDE.CATEGORY SETTING Ap, Vp THEN
        Y.TRN.TYPE=REC.ATM.CHRG<ATM.MAINT.TRANSACTION.TYPE>
        Y.VEN.ACT=REC.ATM.CHRG<ATM.MAINT.VEN.ACCT,Vp>
        Y.VEN.AMT=REC.ATM.CHRG<ATM.MAINT.VEN.CHARGE.AMT,Vp>
        IF Y.CARD.OFFER.VAL NE "50Percent" THEN
            Y.CHRG.TYPE=REC.ATM.CHRG<ATM.MAINT.CHARGE.TYPE,Vp>
            Y.BR.CHRG.AMT=REC.ATM.CHRG<ATM.MAINT.BRANCH.CHARGE.AMT,Vp>
            Y.FT.COMM=REC.ATM.CHRG<ATM.MAINT.FT.COMM.TYPE,Vp>
            Y.FT.COM.AMT=REC.ATM.CHRG<ATM.MAINT.FT.COMM.AMT,Vp>
            Y.VAT.PER=REC.ATM.CHRG<ATM.MAINT.VAT.PERCENT,Vp>
        END
    END
    IF V$FUNCTION EQ 'R' THEN
        ETEXT ="REVERSE NOT ALLOW"
        CALL STORE.END.ERROR
    END

    IF V$FUNCTION EQ 'A' THEN
        IF Y.TRN.TYPE NE R.NEW(FT.TRANSACTION.TYPE) THEN
            ETEXT ="INVALID TRANSACTION TYPE"
            CALL STORE.END.ERROR
        END

        IF  Y.VEN.ACT NE R.NEW(FT.CREDIT.ACCT.NO) THEN
            ETEXT ="INVALID CREDIT ACCOUNT"
            CALL STORE.END.ERROR
        END
        IF  Y.VEN.AMT NE R.NEW(FT.DEBIT.AMOUNT) THEN
            ETEXT ="INVALID DEBIT AMOUNT"
            CALL STORE.END.ERROR
        END
        IF  Y.AC.ID NE R.NEW(FT.DEBIT.ACCT.NO) THEN
            ETEXT ="INVALID DEBIT ACCOUNT"
            CALL STORE.END.ERROR
        END

        IF Y.FT.COM.AMT NE "" THEN
            IF  Y.FT.COMM NE R.NEW(FT.COMMISSION.TYPE) THEN
                ETEXT ="INVALID FT COMMISSION"
                CALL STORE.END.ERROR
            END

            CALL F.READ(FN.COMM,Y.FT.COMM,REC.COMM,F.COMM,ERR.COMM)
            Y.TAX.CODE=REC.COMM<FT4.TAX.CODE>
            CALL EB.ROUND.AMOUNT(LCCY,Y.FT.COM.AMT,"","")


            Y.LIVE.AMT=OCONV(R.NEW(FT.COMMISSION.AMT),"MC/A")

            IF   Y.FT.COM.AMT NE Y.LIVE.AMT THEN
                ETEXT ="INVALID FT COMMISSION AMT"
                CALL STORE.END.ERROR
            END

            Y.TAX.AMT=(Y.FT.COM.AMT*15)/100
            CALL EB.ROUND.AMOUNT(LCCY,Y.TAX.AMT,"","")
            Y.TAX.AMT="BDT":Y.TAX.AMT

            IF Y.TAX.CODE NE "" AND R.NEW(FT.TAX.AMT) NE Y.TAX.AMT THEN
                ETEXT ="INVALID TAX AMT"
                CALL STORE.END.ERROR
            END
        END

        IF Y.REQUEST.TYPE EQ "PINREISSUE" OR Y.REQUEST.TYPE EQ "CLOSE" THEN
            IF  Y.FT.COMM NE R.NEW(FT.COMMISSION.TYPE) THEN
                ETEXT ="INVALID FT COMMISSION"
                CALL STORE.END.ERROR
            END

            Y.FT.AMT=(R.NEW(FT.DEBIT.AMOUNT)*15)/100
            CALL EB.ROUND.AMOUNT(LCCY,Y.FT.AMT,"","")
            Y.FT.AMT="BDT":Y.FT.AMT

            IF R.NEW(FT.COMMISSION.AMT) NE Y.FT.AMT  THEN
                ETEXT ="INVALID COMMISSION AMT"
                CALL STORE.END.ERROR
            END
        END
    END

    IF R.ATM.REC EQ "" THEN
        ETEXT ="INVALID FT"
        CALL STORE.END.ERROR
    END
    IF V$FUNCTION EQ 'I' THEN
        Y.ATM.CR.ID=R.ATM.REC<EB.ATM19.ATTRIBUTE5>
        IF  Y.ATM.CR.ID NE "" THEN
            CALL F.READ(FN.FT.NAU, Y.ATM.CR.ID,REC.FT.CHK,F.FT.NAU,ERR.FT)

            IF REC.FT.CHK NE "" THEN
                ETEXT ="FUNDS TRANSFER UNAUTHRISED STAGE"
                CALL STORE.END.ERROR
            END
            IF REC.FT.CHK EQ "" THEN
                CALL F.READ(FN.FT, Y.ATM.CR.ID,REC.FT.CHK,F.FT,ERR.FT)
                IF REC.FT.CHK NE "" THEN
                    ETEXT ="CHARGE ALREADY DEDUCTED"
                    CALL STORE.END.ERROR
                END

            END
            IF REC.FT.CHK EQ "" THEN
                CALL EB.READ.HISTORY.REC(F.FT.HIS, Y.ATM.CR.ID,REC.FT.CHK,Y.ERR.FT.HIS)
                IF REC.FT.CHK NE "" AND REC.FT.CHK<FT.RECORD.STATUS> NE "REVE" THEN
                    ETEXT ="CHARGE ALREADY DEDUCTED"
                    CALL STORE.END.ERROR
                END
            END
        END ELSE

            R.ATM.REC<EB.ATM19.ATTRIBUTE5>=ID.NEW
            CALL F.WRITE(FN.ATM.NAU,Y.ATM.ID,R.ATM.REC)
        END
    END
    IF V$FUNCTION EQ 'D' THEN
        R.ATM.REC<EB.ATM19.ATTRIBUTE5>=""
        CALL F.WRITE(FN.ATM.NAU,Y.ATM.ID,R.ATM.REC)
    END

    RETURN


