*-----------------------------------------------------------------------------
* <Rating>6303</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE ABL.S.MULTIPLE.MCD.CHECK
    $INSERT GLOBUS.BP I_EQUATE
    $INSERT GLOBUS.BP I_COMMON
    $INSERT JBL.BP I_F.ABL.H.MUL.MCD
    $INSERT GLOBUS.BP I_F.CATEGORY
    $INSERT GLOBUS.BP I_F.ACCOUNT
    $INSERT GLOBUS.BP I_F.POSTING.RESTRICT
    $INSERT GLOBUS.BP I_F.CHEQUE.TYPE.ACCOUNT
    $INSERT GLOBUS.BP I_F.CHEQUE.REGISTER
    $INSERT GLOBUS.BP I_F.CHEQUES.PRESENTED
    $INSERT JBL.BP I_F.ABL.H.MUL.PRM
    $INSERT GLOBUS.BP I_F.USER
    $INSERT GLOBUS.BP I_GTS.COMMON
    $INSERT GLOBUS.BP I_F.LIMIT

    GOSUB INIT
    GOSUB OPENFILES
    GOSUB PROCESS
    RETURN

INIT:
    FN.CAT='F.CATEGORY'
    F.CAT=''
    REC.CAT=''
    Y.CAT.ID=''

    FN.AC='F.ACCOUNT'
    F.AC=''
    REC.AC=''
    Y.AC.ID=''

    FN.POS.RES='F.POSTING.RESTRICT'
    F.POS.RES=''
    REC.POS.RES=''

    FN.MUL.PARAM='F.ABL.H.MUL.PRM'
    F.MUL.PARAM=''
    REC.MUL.PARAM=''
    Y.RES.OVERDRAFT.CATEG=''

    FN.CHEQUE.REGISTER = 'F.CHEQUE.REGISTER'
    F.CHEQUE.REGISTER = ''

    FN.CHEQUES.STOPPED = 'F.CHEQUES.STOPPED'
    F.CHEQUES.STOPPED = ''

    FN.CHEQUES.PRESENTED = 'F.CHEQUES.PRESENTED'
    F.CHEQUES.PRESENTED = ''

    FN.CHEQUE.TYPE.ACCOUNT = 'F.CHEQUE.TYPE.ACCOUNT'
    F.CHEQUE.TYPE.ACCOUNT = ''

    FN.LIMIT="F.LIMIT"
    F.LIMIT=''

    R.LIMIT=''
    R.CHEQUE.TYPE.ACCOUNT=''
    Y.CHEQUE.TYPE =''
    Y.CHQ.REG.ID=''
    R.CHEQUE.REGISTER=''
    CR.ISSUE.RANGE=''
    CR.ISSUE.RANGE.CNT=''
    Y.CHEQUE.NO=''
    Y.CHQ.PRESENTED.ID=''
    R.CHQ.PRESENT=''
    Y.CHQ.STOPPED.ID=''
    R.CHQ.STOPPED=''

    Y.DP.STOCK="DR.STOCK.VALUE"
    Y.DP.STOCK.POS=""
    CALL GET.LOC.REF("LIMIT",Y.DP.STOCK,Y.DP.STOCK.POS)
    Y.LIMIT.CK.CATEG=''
    RETURN

OPENFILES:
    CALL OPF(FN.CAT,N.CAT)
    CALL OPF(FN.AC,F.AC)
    CALL OPF(FN.POS.RES,F.POS.RES)
    CALL OPF(FN.MUL.PARAM,F.MUL.PARAM)
    CALL OPF(FN.CHEQUE.REGISTER,F.CHEQUE.REGISTER)
    CALL OPF(FN.CHEQUES.STOPPED,F.CHEQUES.STOPPED)
    CALL OPF(FN.CHEQUES.PRESENTED,F.CHEQUES.PRESENTED)
    CALL OPF(FN.CHEQUE.TYPE.ACCOUNT,F.CHEQUE.TYPE.ACCOUNT)
    CALL OPF(FN.LIMIT,F.LIMIT)

    RETURN
!!1) Check debit account is customer account,internal account or PL account.For customer and internal account check in ACCOUNT application and for PL check the CATEGORY file.
!!2) If debit account internal account then Orderding Bank is mandatory
!!3) If debit account PL category then Profit centre customer is mandatory
!!4) If debit account PL category then Cheque field should be blank
!!5) Unauthorise overdraft in case of customer account(unauthorise category should be parameterised)
!!6) If cheque is input then check cheque issued,presented,stopped
!!7) If debit account is customer account then check posting restriction(DEBIT,ALL)
!!8) Debit amount must be equal to sum of credit amount.
!!9) If credit account is customer account then check posting restriction(Credit,ALL)
!!10)Check the SYSTEM parameter file(Where suspense category,unauthorise overdraft category)
!!11)Check suspense account is define for the originating company or not

PROCESS:
    IF V$FUNCTION EQ 'I' OR V$FUNCTION EQ 'A' OR V$FUNCTION EQ 'V' THEN

        CALL F.READ(FN.MUL.PARAM,'SYSTEM',REC.MUL.PARAM,F.MUL.PARAM,ERR.MUL.PARAM)
        IF REC.MUL.PARAM EQ '' THEN
            ETEXT="Parameter File Missing For Multiple Debit/Credit"
            CALL STORE.END.ERROR
            RETURN
        END
        ELSE
            Y.RES.OVERDRAFT.CATEG=REC.MUL.PARAM<MPM.OVERDRAFT.RES.CATEG>
            Y.LIMIT.CK.CATEG=REC.MUL.PARAM<MPM.LIMIT.CHK.CATEG>
            Y.SUS.AC=''
            Y.SUS.AC=LCCY:REC.MUL.PARAM<MPM.SUS.CATEG>:"0001":RIGHT(ID.COMPANY,4)
            CALL F.READ(FN.AC,Y.SUS.AC,REC.AC,F.AC,ERR.AC)
            IF REC.AC EQ '' THEN
                ETEXT="Suspense Account Missing For Multiple Debit/Credit"
                CALL STORE.END.ERROR
                RETURN
            END

        END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        IF R.NEW(MCD.CREDIT.ACCT.NO) NE '' THEN
            CR.AC.CNT=''
            Y.TOT.CR.AMT=''
            CR.AC.CNT=DCOUNT(R.NEW(MCD.CREDIT.ACCT.NO),VM)
            FOR M=1 TO CR.AC.CNT
                Y.CR.AC.ID=''
                REC.CR.AC=''
                Y.TOT.CR.AMT=Y.TOT.CR.AMT+R.NEW(MCD.CREDIT.AMOUNT)<1,M>
                Y.CR.AC.ID=R.NEW(MCD.CREDIT.ACCT.NO)<1,M>

!                Y.SUS.AC=''
!                Y.SUS.AC=R.NEW(MCD.CREDIT.CURRENCY)<1,M>:REC.MUL.PARAM<MPM.SUS.CATEG>:"0001":RIGHT(ID.COMPANY,4)
!                CALL F.READ(FN.AC,Y.SUS.AC,REC.AC,F.AC,ERR.AC)
!                IF REC.AC EQ '' THEN
!                    ETEXT="Suspense Account Missing For Multiple Debit/Credit"
!                    CALL STORE.END.ERROR
!                    RETURN
!                END

                REC.AC=''
                BEGIN CASE
                CASE  Y.CR.AC.ID[1,2] EQ 'PL'

                    Y.CAT.ID=Y.CR.AC.ID[3,99]
                    REC.CAT=''
                    REC.AC=''
                    IF NOT(Y.CAT.ID GE 50000 AND Y.CAT.ID LE 69999) THEN
                        AF=MCD.CREDIT.ACCT.NO
                        AV=M
                        ETEXT="Invalid PL Category Range"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    CALL F.READ(FN.CAT,Y.CAT.ID,REC.CAT,F.CAT,ERR.CAT)
                    IF REC.CAT EQ '' THEN
                        AF=MCD.CREDIT.ACCT.NO
                        AV=M
                        ETEXT="Invalid PL Category"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    ELSE
                        R.NEW(MCD.CR.AC.TITLE)<1,M>=REC.CAT<EB.CAT.DESCRIPTION>
                    END

                CASE Y.CR.AC.ID MATCHES '3A...'

                    CALL F.READ(FN.AC,Y.CR.AC.ID,REC.AC,F.AC,ERR.AC)
                    IF REC.AC EQ '' THEN
                        AF=MCD.CREDIT.ACCT.NO
                        AV=M
                        ETEXT="Invalid Internal Account"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    ELSE
                        R.NEW(MCD.CR.AC.TITLE)<1,M>=REC.AC<AC.ACCOUNT.TITLE.1>
                        A.INDEX = ""
                        POS=""
                        AF=MCD.CREDIT.AMOUNT
                        AV=M
                        POS=AF:'.':AV
                        LOCATE POS IN T.FIELDNO<1> SETTING A.INDEX ELSE
                            A.INDEX = ""
                        END
                        IF A.INDEX NE "" THEN
                            T.ENRI<A.INDEX> = REC.AC<AC.WORKING.BALANCE>
                            OFS$ENRI<AF,AV>=REC.AC<AC.WORKING.BALANCE>
                        END

                        IF REC.AC<AC.CO.CODE> NE ID.COMPANY THEN
                            AF=MCD.CREDIT.ACCT.NO
                            AV=M
                            ETEXT="Internal Account Does Not Belongs to this Company ":ID.COMPANY
                            CALL STORE.END.ERROR
                            RETURN
                        END

                    END

                CASE OTHERWISE

                    CALL F.READ(FN.AC,Y.CR.AC.ID,REC.CR.AC,F.AC,ERR.AC)

                    IF REC.CR.AC EQ '' THEN
                        AF=MCD.CREDIT.ACCT.NO
                        AV=M
                        ETEXT="Invalid Account Number"
                        CALL STORE.END.ERROR
                        RETURN
                    END

                    ELSE
                        IF REC.CR.AC<AC.CO.CODE> NE ID.COMPANY THEN
                            AF=MCD.CREDIT.ACCT.NO
                            AV=M
                            ETEXT="Account Does Not Belongs to this Company ":ID.COMPANY
                            CALL STORE.END.ERROR
                            RETURN
                        END
                        IF REC.CR.AC<AC.ALL.IN.ONE.PRODUCT> NE "" THEN          ;* S/Restrict AZ.ACCOUNT Transaction
                            AF=MCD.CREDIT.ACCT.NO
                            AV=M
                            ETEXT="AZ Account not Possible To Credit ":Y.CR.AC.ID
                            CALL STORE.END.ERROR
                            RETURN
                        END   ;*E/Restrict AZ.ACCOUNT Transaction

                        R.NEW(MCD.CR.AC.TITLE)<1,M>=REC.CR.AC<AC.ACCOUNT.TITLE.1>
                        A.INDEX = ""
                        POS=""
                        AF=MCD.CREDIT.AMOUNT
                        AV=M
                        POS=AF:'.':AV
                        LOCATE POS IN T.FIELDNO<1> SETTING A.INDEX ELSE
                            A.INDEX = ""
                        END
                        IF A.INDEX NE "" THEN
                            T.ENRI<A.INDEX> = REC.CR.AC<AC.WORKING.BALANCE>
                            OFS$ENRI<AF,AV>= REC.CR.AC<AC.WORKING.BALANCE>
                        END

                        IF REC.CR.AC<AC.POSTING.RESTRICT> NE '' THEN
                            CALL F.READ(FN.POS.RES,REC.CR.AC<AC.POSTING.RESTRICT>,REC.POS.RES,F.POS.RES,ERR.POS.RES)
                            IF ( REC.POS.RES<AC.POS.RESTRICTION.TYPE> EQ 'CREDIT') OR ( REC.POS.RES<AC.POS.RESTRICTION.TYPE> EQ 'ALL') THEN
                                AF=MCD.CREDIT.ACCT.NO
                                AV=M
                                ETEXT = "Posting Restrict In ":Y.CR.AC.ID
                                CALL STORE.END.ERROR
                                RETURN
                            END
                        END
                    END
                END CASE
            NEXT
        END
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!-----5/8/9----!
        IF R.NEW(MCD.DEBIT.ACCT.NO) NE '' THEN
            DR.AC.CNT=''
            Y.TOT.DR.AMT=''
            DR.AC.CNT=DCOUNT(R.NEW(MCD.DEBIT.ACCT.NO),VM)
            FOR I=1 TO DR.AC.CNT
                Y.DR.AC.ID=''
                REC.DR.AC=''
                Y.TOT.DR.AMT=Y.TOT.DR.AMT+R.NEW(MCD.DEBIT.AMOUNT)<1,I>
                Y.DR.AC.ID=R.NEW(MCD.DEBIT.ACCT.NO)<1,I>

!                Y.SUS.AC=''
!                Y.SUS.AC=R.NEW(MCD.CREDIT.CURRENCY)<1,I>:REC.MUL.PARAM<MPM.SUS.CATEG>:"0001":RIGHT(ID.COMPANY,4)
!                CALL F.READ(FN.AC,Y.SUS.AC,REC.AC,F.AC,ERR.AC)
!                IF REC.AC EQ '' THEN
!                    ETEXT="Suspense Account Missing For Multiple Debit/Credit"
!                    CALL STORE.END.ERROR
!                    RETURN
!                END

                REC.AC=''
                BEGIN CASE
                CASE  Y.DR.AC.ID[1,2] EQ 'PL'

                    Y.CAT.ID=Y.DR.AC.ID[3,99]
                    REC.CAT=''
                    REC.AC=''
                    IF NOT(Y.CAT.ID GE 50000 AND Y.CAT.ID LE 69999) THEN
                        AF=MCD.DEBIT.ACCT.NO
                        AV=I
                        ETEXT="Invalid PL Category Range"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    CALL F.READ(FN.CAT,Y.CAT.ID,REC.CAT,F.CAT,ERR.CAT)
                    IF REC.CAT EQ '' THEN
                        AF=MCD.DEBIT.ACCT.NO
                        AV=I
                        ETEXT="Invalid PL Category"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    ELSE
                        R.NEW(MCD.DR.AC.TITLE)<1,I>=REC.CAT<EB.CAT.DESCRIPTION>
                        IF R.NEW(MCD.CHEQUE.NUMBER)<1,I> NE '' THEN
                            AF=MCD.DEBIT.ACCT.NO
                            AV=I
                            ETEXT="Cheque Number Should be Null For PL Category"
                            CALL STORE.END.ERROR
                            RETURN
                        END
                    END

                CASE Y.DR.AC.ID MATCHES '3A...'

                    CALL F.READ(FN.AC,Y.DR.AC.ID,REC.AC,F.AC,ERR.AC)
                    IF REC.AC EQ '' THEN
                        AF=MCD.DEBIT.ACCT.NO
                        AV=I
                        ETEXT="Invalid Internal Account"
                        CALL STORE.END.ERROR
                        RETURN
                    END
                    ELSE
                        R.NEW(MCD.DR.AC.TITLE)<1,I>=REC.AC<AC.ACCOUNT.TITLE.1>
                        A.INDEX = ""
                        POS=""
                        AF=MCD.DEBIT.AMOUNT
                        AV=I
                        POS=AF:'.':AV
                        LOCATE POS IN T.FIELDNO<1> SETTING A.INDEX ELSE
                            A.INDEX = ""
                        END
                        IF A.INDEX NE "" THEN
                            T.ENRI<A.INDEX> = REC.AC<AC.WORKING.BALANCE>
                            OFS$ENRI<AF,AV>= REC.AC<AC.WORKING.BALANCE>
                        END
                        IF REC.AC<AC.CO.CODE> NE ID.COMPANY THEN
                            AF=MCD.DEBIT.ACCT.NO
                            AV=I
                            ETEXT="Internal Account Does Not Belongs to this Company ":ID.COMPANY
                            CALL STORE.END.ERROR
                            RETURN
                        END
                        IF R.NEW(MCD.CHEQUE.NUMBER)<1,I> NE '' THEN
                            AF=MCD.DEBIT.ACCT.NO
                            AV=I
                            ETEXT="Cheque Number Should be Null For Internal Account"
                            CALL STORE.END.ERROR
                            RETURN
                        END
                    END

                CASE OTHERWISE

                    CALL F.READ(FN.AC,Y.DR.AC.ID,REC.DR.AC,F.AC,ERR.AC)

                    IF REC.DR.AC EQ '' THEN
                        AF=MCD.DEBIT.ACCT.NO
                        AV=I
                        ETEXT="Invalid Account Number"
                        CALL STORE.END.ERROR
                        RETURN
                    END

                    ELSE
                        IF REC.DR.AC<AC.CO.CODE> NE ID.COMPANY THEN
                            AF=MCD.DEBIT.ACCT.NO
                            AV=I
                            ETEXT="Account Does Not Belongs to this Company ":ID.COMPANY
                            CALL STORE.END.ERROR
                            RETURN
                        END

                        IF REC.DR.AC<AC.ALL.IN.ONE.PRODUCT> NE "" THEN          ;* S/Restrict AZ.ACCOUNT Transaction
                            AF=MCD.DEBIT.ACCT.NO
                            AV=I
                            ETEXT="AZ Account not Possible To Debit ":Y.DR.AC.ID
                            CALL STORE.END.ERROR
                            RETURN
                        END   ;*E/Restrict AZ.ACCOUNT Transaction

                        R.NEW(MCD.DR.AC.TITLE)<1,I>=REC.DR.AC<AC.ACCOUNT.TITLE.1>
                        A.INDEX = ""
                        POS=""
                        AF=MCD.DEBIT.AMOUNT
                        AV=I
                        POS=AF:'.':AV
                        LOCATE POS IN T.FIELDNO<1> SETTING A.INDEX ELSE
                            A.INDEX = ""
                        END
                        IF A.INDEX NE "" THEN
                            T.ENRI<A.INDEX> = REC.DR.AC<AC.WORKING.BALANCE>
                            OFS$ENRI<AF,AV>= REC.DR.AC<AC.WORKING.BALANCE>
                        END


                        IF REC.DR.AC<AC.POSTING.RESTRICT> NE '' THEN
                            CALL F.READ(FN.POS.RES,REC.DR.AC<AC.POSTING.RESTRICT>,REC.POS.RES,F.POS.RES,ERR.POS.RES)
                            IF ( REC.POS.RES<AC.POS.RESTRICTION.TYPE> EQ 'DEBIT') OR ( REC.POS.RES<AC.POS.RESTRICTION.TYPE> EQ 'ALL') THEN
                                AF=MCD.DEBIT.ACCT.NO
                                AV=I
                                ETEXT = "Posting Restrict In ":Y.DR.AC.ID
                                CALL STORE.END.ERROR
                                RETURN
                            END
                        END

!----------------------------AMOUNT BLOCK-----------------!
                        IF REC.DR.AC<AC.LOCKED.AMOUNT> NE '' THEN
                            Y.BLOCK.AMT=""
                            Y.BLOCK.AMT=REC.DR.AC<AC.WORKING.BALANCE>-SUM(REC.DR.AC<AC.LOCKED.AMOUNT>)
                            IF R.NEW(MCD.DEBIT.AMOUNT)<1,I> GT Y.BLOCK.AMT THEN
                                AF=MCD.DEBIT.ACCT.NO
                                AV=I
                                ETEXT = "Amount Blocked ":Y.DR.AC.ID
                                CALL STORE.END.ERROR
                            END
                        END
!---------------------------AMOUNT BLOCK------------------!
                        IF NOT(Y.DR.AC.ID MATCHES '3A...') AND Y.DR.AC.ID[1,2] NE 'PL' THEN

                            Y.POS=''
                            LOCATE REC.DR.AC<AC.CATEGORY> IN  Y.RES.OVERDRAFT.CATEG<1,1> SETTING Y.POS ELSE Y.POS = ''
                            IF Y.POS THEN
                                IF  REC.DR.AC<AC.WORKING.BALANCE> LT R.NEW(MCD.DEBIT.AMOUNT)<1,I> THEN
                                    AF=MCD.DEBIT.ACCT.NO
                                    AV=I
                                    ETEXT="Debit A/c ":R.NEW(MCD.DEBIT.ACCT.NO)<1,I>:" Doesn't Have Sufficient Balance"
                                    CALL STORE.END.ERROR
                                    RETURN
                                END
                                Y.AFTER.BLK.AMT=''
                                IF REC.DR.AC<AC.LOCKED.AMOUNT> NE '' THEN
                                    Y.AFTER.BLK.AMT = REC.DR.AC<AC.WORKING.BALANCE> - REC.DR.AC<AC.LOCKED.AMOUNT>
                                    IF Y.AFTER.BLK.AMT LT R.NEW(MCD.DEBIT.AMOUNT)<1,I> THEN
                                        AF=MCD.DEBIT.ACCT.NO
                                        AV=I
                                        ETEXT="Debit A/c ":R.NEW(MCD.DEBIT.AMOUNT)<1,I>:" Blocked Amount ":REC.DR.AC<AC.LOCKED.AMOUNT>
                                        CALL STORE.END.ERROR
                                        RETURN
                                    END
                                END

                            END
!---S/CC,OD Limit and Drawing Power Check--------!
                            ELSE
                                IF REC.DR.AC<AC.LIMIT.REF> NE '' THEN
                                    AC.LIMIT.ID=REC.DR.AC<AC.CUSTOMER>:".":FMT(FIELD(REC.DR.AC<AC.LIMIT.REF>,".",1,1),"R%7"):".":FMT(FIELD(REC.DR.AC<AC.LIMIT.REF>,".",2,1),"R%2")
                                    CALL F.READ(FN.LIMIT,AC.LIMIT.ID,R.LIMIT,F.LIMIT,ERR.LIM)
                                    IF R.LIMIT<LI.EXPIRY.DATE> LT TODAY THEN
                                        AF=MCD.DEBIT.ACCT.NO
                                        AV=I
                                        ETEXT="Limit Already Expired on =":R.LIMIT<LI.EXPIRY.DATE>
                                        CALL STORE.END.ERROR
                                        RETURN
                                    END
                                    ELSE
                                        Y.DP.AMT=''
                                        Y.DP.AMT = R.LIMIT<LI.LOCAL.REF,Y.DP.STOCK.POS>
                                        IF Y.DP.AMT THEN
                                            IF Y.DP.AMT LT ( ABS(REC.DR.AC<AC.WORKING.BALANCE>) + R.NEW(MCD.DEBIT.AMOUNT)<1,I>) THEN
                                                AF=MCD.DEBIT.ACCT.NO
                                                AV=I
                                                ETEXT="Drawing Power Exceed By Amount = ":(Y.DP.AMT - (ABS(REC.DR.AC<AC.WORKING.BALANCE>) + R.NEW(MCD.DEBIT.AMOUNT)<1,I>))
                                                CALL STORE.END.ERROR
                                                RETURN

                                            END

                                        END

                                        ELSE
                                            IF R.LIMIT<LI.INTERNAL.AMOUNT> LT (ABS(REC.DR.AC<AC.WORKING.BALANCE>) + R.NEW(MCD.DEBIT.AMOUNT)<1,I>) THEN
                                                AF=MCD.DEBIT.ACCT.NO
                                                AV=I
                                                ETEXT="Limt Exceed By Amount = ":(R.LIMIT<LI.INTERNAL.AMOUNT> - (ABS(REC.DR.AC<AC.WORKING.BALANCE>) + R.NEW(MCD.DEBIT.AMOUNT)<1,I>))
                                                CALL STORE.END.ERROR
                                                RETURN
                                            END
                                        END
                                    END
                                END

!---S/CC,OD Limit Input Check--------------------!
                                ELSE
                                    LOCATE REC.DR.AC<AC.CATEGORY> IN  Y.LIMIT.CK.CATEG<1,1> SETTING Y.LIMIT.POS THEN
                                        AF=MCD.DEBIT.ACCT.NO
                                        AV=I
                                        ETEXT="Limit Not Attached"
                                        CALL STORE.END.ERROR
                                        RETURN
                                    END
                                END
!---E/CC,OD Limit Input Check--------------------!

                            END
!---E/CC,OD Limit and Drawing Power Check--------!


                        END

                        IF R.NEW(MCD.CHEQUE.NUMBER)<1,I> NE '' THEN
                            Y.CHEQUE.NO=R.NEW(MCD.CHEQUE.NUMBER)<1,I>
                            CALL F.READ(FN.CHEQUE.TYPE.ACCOUNT,Y.DR.AC.ID,R.CHEQUE.TYPE.ACCOUNT,F.CHEQUE.TYPE.ACCOUNT,CTA.READ.ERR)
                            IF NOT(R.CHEQUE.TYPE.ACCOUNT) THEN
                                AF=MCD.CHEQUE.NUMBER
                                AV=I
                                ETEXT = 'MISSING CHEQUE TYPE'
                                CALL STORE.END.ERROR
                                RETURN
                            END ELSE
                                Y.CHEQUE.TYPE = R.CHEQUE.TYPE.ACCOUNT<CHQ.TYP.CHEQUE.TYPE,1>
                            END

                            Y.CHQ.REG.ID = Y.CHEQUE.TYPE:'.':Y.DR.AC.ID
                            CALL F.READ(FN.CHEQUE.REGISTER,Y.CHQ.REG.ID,R.CHEQUE.REGISTER,F.CHEQUE.REGISTER,CR.READ.ERR)
                            IF NOT(CR.READ.ERR) THEN
                                CR.ISSUE.RANGE = R.CHEQUE.REGISTER<CHEQUE.REG.CHEQUE.NOS>
                                CR.ISSUE.RANGE.CNT = DCOUNT(CR.ISSUE.RANGE,@VM)
                                Y.START.NO = ''
                                FOR K = 1 TO CR.ISSUE.RANGE.CNT
                                    Y.RANGE.FLD = ''
                                    Y.RANGE.FLD = CR.ISSUE.RANGE<1,K>
                                    Y.START.NO = Y.CHEQUE.NO
                                    Y.END.NO = ''
                                    Y.RESULT = ''
                                    Y.ERROR = ''
                                    CALL EB.MAINTAIN.RANGES(Y.RANGE.FLD,Y.START.NO,Y.END.NO,'ENQ',Y.RESULT,Y.ERROR)
                                    IF Y.RESULT EQ 1 THEN EXIT
                                NEXT K
                                IF NOT(Y.RESULT) THEN
                                    AF=MCD.CHEQUE.NUMBER
                                    AV=I
                                    ETEXT = "CHEQUE NUMBER ":Y.CHEQUE.NO:" NOT ISSUED TO THE ACCOUNT ":Y.DR.AC.ID
                                    CALL STORE.END.ERROR
                                    RETURN

                                END
                                CR.RET.RANGE = R.CHEQUE.REGISTER<CHEQUE.REG.RETURNED.CHQS>
                                LOCATE Y.CHEQUE.NO IN CR.RET.RANGE<1,1> SETTING Y.RET.RG.POS THEN
                                    AF=MCD.CHEQUE.NUMBER
                                    AV=I
                                    ETEXT = "CHEQUE NUMBER ":Y.CHEQUE.NO:" ALREADY CANCELLED"
                                    CALL STORE.END.ERROR
                                    RETURN
                                END

                                Y.CHQ.PRESENTED.ID = Y.CHEQUE.TYPE:'.':Y.DR.AC.ID:'-':Y.CHEQUE.NO
                                CALL F.READ(FN.CHEQUES.PRESENTED,Y.CHQ.PRESENTED.ID,R.CHQ.PRESENT,F.CHEQUES.PRESENTED,CHQ.PRESENT.READ.ERR)
                                IF R.CHQ.PRESENT THEN
                                    AF=MCD.CHEQUE.NUMBER
                                    AV=I
                                    ETEXT = "CHEQUE NUMBER ":Y.CHEQUE.NO:" ALREADY PRESENTED ON ":R.CHQ.PRESENT<CHQ.PRE.DATE.PRESENTED,1>
                                    CALL STORE.END.ERROR
                                    RETURN
                                END

                                Y.CHQ.STOPPED.ID = Y.DR.AC.ID:'*':Y.CHEQUE.NO
                                CALL F.READ(FN.CHEQUES.STOPPED,Y.CHQ.STOPPED.ID,R.CHQ.STOPPED,F.CHEQUES.STOPPED,CHQ.STOP.READ.ERR)
                                IF R.CHQ.STOPPED THEN
                                    AF=MCD.CHEQUE.NUMBER
                                    AV=I
                                    ETEXT = "CHEQUE NUMBER ":Y.CHEQUE.NO:" ALREADY STOPPED"
                                    CALL STORE.END.ERROR
                                    RETURN
                                END

                            END ELSE
                                AF=MCD.CHEQUE.NUMBER
                                AV=I
                                ETEXT = "CHEQUE REGISTER NOT AVAILABLE FOR ACCOUNT NUMBER ":Y.DR.AC.ID
                                CALL STORE.END.ERROR
                                RETURN
                            END

                        END


                    END
                END CASE
            NEXT
        END

        IF Y.TOT.CR.AMT NE Y.TOT.DR.AMT THEN
!            ETEXT="Total Debit And Total Credit Should Be Same"
            ETEXT="Total Debit = ":Y.TOT.DR.AMT:" And Total Credit =":Y.TOT.CR.AMT:" Differ = ":(Y.TOT.DR.AMT-Y.TOT.CR.AMT)
            CALL STORE.END.ERROR
            RETURN
        END

    END
!    IF V$FUNCTION EQ 'A' THEN
!        CALL ABL.S.MULTIPLE.MCD.AUTH
!    END

    RETURN
END
