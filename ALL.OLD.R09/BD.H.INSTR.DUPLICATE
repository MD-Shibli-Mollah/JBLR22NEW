* Version 9 15/11/00  GLOBUS Release No. R05.007 21/06/06
*-----------------------------------------------------------------------------
* <Rating>335</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE BD.H.INSTR.DUPLICATE
******************************************************************
* This template is to store the duplicate PO/PS/SDR issued against an original instrument
* The ID of this template is as like as the original entry in the template named PR.H.INSTR.ISSUED
* Name: Omar Faruq
*-----------------------------------------------------------------------------
* Modification History:
*
*
*-----------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_GTS.COMMON
    $INSERT I_F.OFS.STATUS.FLAG
    $INSERT JBL.BP I_F.PR.H.INSTRUMENT
    $INSERT JBL.BP I_F.PR.H.INSTR.ISSUED
    $INSERT JBL.BP I_F.BD.H.INSTR.DUPLICATE
*************************************************************************

    GOSUB DEFINE.PARAMETERS

    IF LEN(V$FUNCTION) GT 1 THEN
        GOTO V$EXIT
    END

    CALL MATRIX.UPDATE

    GOSUB INITIALISE          ;* Special Initialising

*************************************************************************

* Main Program Loop

    LOOP

        CALL RECORDID.INPUT

    UNTIL (MESSAGE EQ 'RET')

        V$ERROR = ''

        IF MESSAGE EQ 'NEW FUNCTION' THEN

            GOSUB CHECK.FUNCTION        ;* Special Editing of Function

            IF V$FUNCTION EQ 'E' OR V$FUNCTION EQ 'L' THEN
                CALL FUNCTION.DISPLAY
                V$FUNCTION = ''
            END

        END ELSE

            GOSUB CHECK.ID    ;* Special Editing of ID
            IF V$ERROR THEN GOTO MAIN.REPEAT

            CALL RECORD.READ

            IF MESSAGE EQ 'REPEAT' THEN
                GOTO MAIN.REPEAT
            END

            GOSUB CHECK.RECORD          ;* Special Editing of Record

            CALL MATRIX.ALTER

            IF V$ERROR THEN GOTO MAIN.REPEAT

            LOOP
                GOSUB PROCESS.FIELDS    ;* ) For Input
                GOSUB PROCESS.MESSAGE   ;* ) Applications
            WHILE (MESSAGE EQ 'ERROR') REPEAT

        END

MAIN.REPEAT:
    REPEAT

    V$EXIT:
    RETURN          ;* From main program

*************************************************************************
*                      S u b r o u t i n e s                            *
*************************************************************************

PROCESS.FIELDS:

* Input or display the record fields.

    LOOP
        IF SCREEN.MODE EQ 'MULTI' THEN
            IF FILE.TYPE EQ 'I' THEN
                CALL FIELD.MULTI.INPUT
            END ELSE
                CALL FIELD.MULTI.DISPLAY
            END
        END ELSE
            IF FILE.TYPE EQ 'I' THEN
                CALL FIELD.INPUT
            END ELSE
                CALL FIELD.DISPLAY
            END
        END

    WHILE NOT(MESSAGE)

        GOSUB CHECK.FIELDS    ;* Special Field Editing

        IF T.SEQU NE '' THEN T.SEQU<-1> = A + 1

    REPEAT

    RETURN

*************************************************************************

PROCESS.MESSAGE:

* Processing after exiting from field input (PF5)

    IF MESSAGE = 'DEFAULT' THEN
        MESSAGE = 'ERROR'     ;* Force the processing back
        IF V$FUNCTION <> 'D' AND V$FUNCTION <> 'R' THEN
            GOSUB CROSS.VALIDATION
        END
    END

    IF MESSAGE = 'PREVIEW' THEN
        MESSAGE = 'ERROR'     ;* Force the processing back
        IF V$FUNCTION <> 'D' AND V$FUNCTION <> 'R' THEN
            GOSUB CROSS.VALIDATION
            IF NOT(V$ERROR) THEN
REM >               GOSUB DELIVERY.PREVIEW   ; * Activate print preview
            END
        END
    END

    IF MESSAGE EQ 'VAL' THEN
        MESSAGE = ''
        BEGIN CASE
        CASE V$FUNCTION EQ 'D'
            GOSUB CHECK.DELETE          ;* Special Deletion checks
        CASE V$FUNCTION EQ 'R'
            GOSUB CHECK.REVERSAL        ;* Special Reversal checks
        CASE OTHERWISE
            GOSUB CROSS.VALIDATION      ;* Special Cross Validation
            IF NOT(V$ERROR) THEN
                GOSUB OVERRIDES
            END
        END CASE
        IF NOT(V$ERROR) THEN
            GOSUB BEFORE.UNAU.WRITE     ;* Special Processing before write
        END
        IF NOT(V$ERROR) THEN
            CALL UNAUTH.RECORD.WRITE
            IF MESSAGE NE "ERROR" THEN
                GOSUB AFTER.UNAU.WRITE  ;* Special Processing after write
            END
        END

    END

    IF MESSAGE EQ 'AUT' THEN

        GOSUB AUTH.CROSS.VALIDATION     ;* Special Cross Validation
        IF NOT(V$ERROR) THEN
            GOSUB BEFORE.AUTH.WRITE     ;* Special Processing before write
        END

        IF NOT(V$ERROR) THEN

            CALL AUTH.RECORD.WRITE

            IF MESSAGE NE "ERROR" THEN
                GOSUB AFTER.AUTH.WRITE  ;* Special Processing after write
            END
        END

    END

    RETURN

*************************************************************************
*                      Special Tailored Subroutines                     *
*************************************************************************

CHECK.ID:
* Validation and changes of the ID entered.  Set ERROR to 1 if in error.
    V$ERROR = 0
    E = ''
    IF NOT(PGM.VERSION) THEN  ;* cheque Id when opened directly from application
* if opened through VERSION then ID routine must be used
        Y.REMITT.TYPE = FIELD(ID.NEW,'.',1)
        Y.ACC = FIELD(FIELD(ID.NEW,'.',2),'-',1)
        Y.CHQ.NO = FIELD(ID.NEW,'-',2)
        GOSUB ID.CHECKING
        IF E THEN
            V$ERROR = 1
            CALL ERR
        END
    END
    RETURN

*************************************************************************

CHECK.RECORD:

* Validation and changes of the Record.  Set ERROR to 1 if in error.

*
* A application runnin in browser will enter CHECK.RECORD multiple
* times during a transaction lifecycle. Any validation that must only
* run when the user first opens the contract must be put in the following
* IF statement
*
    IF OFS$STATUS<STAT.FLAG.FIRST.TIME> THEN      ;* BG_100007114
        R.NEW(INS.DUP.CHEQUE.TYPE) = FIELD(ID.NEW,'.',1)
        R.NEW(INS.DUP.TXN.COMPANY) = ID.COMPANY
        R.NEW(INS.DUP.ORG.CHQ.NO) = FIELD(ID.NEW,'-',2)
    END

    RETURN

*************************************************************************

CHECK.FIELDS:
REM > CALL XX.CHECK.FIELDS
!DEBUG
    BEGIN CASE
    CASE AF=2       ;* field 'DUP.CHQ.NO'
        Y.CHQ.TYPE.ACC = FIELD(ID.NEW,'-',1)
        Y.ACC.ID = FIELD(Y.CHQ.TYPE.ACC,'.',2)
        Y.CHQ.NO = COMI
        GOSUB VALIDATE.INSTR
    END CASE

    IF E THEN
        T.SEQU = "IFLD"
        CALL ERR
    END

    RETURN

*************************************************************************

CROSS.VALIDATION:

*
    V$ERROR = ''
    ETEXT = ''
    TEXT = ''
*
REM > CALL XX.CROSSVAL
*
* If END.ERROR has been set then a cross validation error has occurred
*
    IF END.ERROR THEN
        A = 1
        LOOP UNTIL T.ETEXT<A> <> "" DO A = A+1 ; REPEAT
        T.SEQU = "D"
        T.SEQU<-1> = A
        V$ERROR = 1
        MESSAGE = 'ERROR'
    END
    RETURN          ;* Back to field input via UNAUTH.RECORD.WRITE

*************************************************************************

OVERRIDES:
*
*  Overrides should reside here.
*
    V$ERROR = ''
    ETEXT = ''
    TEXT = ''
REM > CALL XX.OVERRIDE
*

*
    IF TEXT = "NO" THEN       ;* Said NO to override
        V$ERROR = 1
        MESSAGE = "ERROR"     ;* Back to field input

    END
    RETURN

*************************************************************************

AUTH.CROSS.VALIDATION:


    RETURN

*************************************************************************

CHECK.DELETE:


    RETURN

*************************************************************************

CHECK.REVERSAL:


    RETURN

*************************************************************************
DELIVERY.PREVIEW:

    RETURN

*************************************************************************

BEFORE.UNAU.WRITE:
*
*  Contract processing code should reside here.
*
REM > CALL XX.         ;* Accounting, Schedule processing etc etc

    IF TEXT = "NO" THEN       ;* Said No to override
        CALL TRANSACTION.ABORT          ;* Cancel current transaction
        V$ERROR = 1
        MESSAGE = "ERROR"     ;* Back to field input
        RETURN
    END

*
* Additional updates should be performed here
*
REM > CALL XX...



    RETURN

*************************************************************************

AFTER.UNAU.WRITE:


    RETURN

*************************************************************************

AFTER.AUTH.WRITE:



    RETURN
************************************************************************
FATAL.ERROR:
*===========

    RETURN

*************************************************************************

BEFORE.AUTH.WRITE:

    BEGIN CASE
    CASE R.NEW(V-8)[1,3] = "INA"        ;* Record status
REM > CALL XX.AUTHORISATION
    CASE R.NEW(V-8)[1,3] = "RNA"        ;* Record status
REM > CALL XX.REVERSAL

    END CASE

    RETURN

*************************************************************************

CHECK.FUNCTION:

* Validation of function entered.  Set FUNCTION to null if in error.

    IF INDEX('V',V$FUNCTION,1) THEN
        E = 'EB.RTN.FUNT.NOT.ALLOWED.APP'
        CALL ERR
        V$FUNCTION = ''
    END

    RETURN

*************************************************************************

INITIALISE:
    FN.INST = 'FBNK.PR.H.INSTRUMENT'
    F.INST = ''
    FN.INST.ISS = 'FBNK.PR.H.INSTR.ISSUED'
    F.INST.ISS = ''
    Y.CHQ.TYPE = ''
    Y.ACC.ID = ''
    Y.CHQ.NO = ''

    FN.CT = 'F.CHEQUE.TYPE'
    F.CT = ' '

    FN.CTA = 'F.CHEQUE.TYPE.ACCOUNT'
    F.CTA = ' '

    CALL OPF(FN.CT,F.CT)
    CALL OPF(FN.CTA,F.CTA)

    CALL OPF(FN.INST.ISS,F.INST.ISS)
    CALL OPF(FN.INST,F.INST)
    RETURN

*************************************************************************

DEFINE.PARAMETERS:
* SEE 'I_RULES' FOR DESCRIPTIONS *

    CALL BD.H.INSTR.DUPLICATE.FIELD.DEF

    RETURN

*************************************************************************
ID.CHECKING:
!DEBUG
    CALL F.READ(FN.CT,Y.REMITT.TYPE,R.CT,F.CT,Y.CT.ERR)
    IF R.CT NE '' THEN
        CALL F.READ(FN.CTA,Y.ACC,R.CTA,F.CTA,Y.CTA.ERR)
        IF R.CTA NE '' THEN
            LOCATE Y.REMITT.TYPE IN R.CTA<1,1> SETTING Y.VM THEN
                Y.CHQ.STATUS = ''
                CALL GET.CHQ.STATUS(Y.ACC,Y.CHQ.NO,Y.CHQ.STATUS)
                Y.MSG = 'NO.CHQ.TYPE' :VM: 'No Cheque Type found'
                Y.MSG<-1> = 'NOT ISSUED' :VM: 'Cheque is not issued to the Account'
                Y.MSG<-1> = 'RETURNED' :VM: 'Cheque is already returned'
                Y.MSG<-1> = 'PRESENTED'   :VM: 'Cheque is already presented'
                Y.MSG<-1> = 'STOPPED'     :VM: 'Cheque is already stopped'
                Y.MSG<-1> = 'NO.CHQ.REG'  :VM: 'No register found'
                FIND Y.CHQ.STATUS IN Y.MSG SETTING Y.NUM THEN
                    E = Y.MSG<Y.NUM,2>
                    RETURN
                END
            END
            ELSE
                E = 'CHEQUE TYPE ':Y.REMITT.TYPE:' NOT BELONGS TO THE ACCOUNT ':Y.ACC
                RETURN
            END
        END
        ELSE
            E = 'ACCOUNT  ': Y.ACC : ' IS MISSING'
        END
    END
    ELSE
        E = 'MISSING CHEQUE TYPE ':Y.REMITT.TYPE
        RETURN
    END

    RETURN
*************************************************************************
VALIDATE.INSTR:
    R.NEW(INS.DUP.DUP.INSTR.REF.NO) = ''
    Y.INST.ISS.ID = Y.CHQ.TYPE.ACC : '-' :Y.CHQ.NO
    R.INST.ISS = ''
    CALL F.READ(FN.INST.ISS,Y.INST.ISS.ID, R.INST.ISS, F.INST.ISS , Y.ERR)
    IF R.INST.ISS THEN
        E = 'Instrument already issued'
        RETURN
    END
    ELSE
        Y.CHQ.STATUS = ''
        CALL GET.CHQ.STATUS(Y.ACC.ID,Y.CHQ.NO,Y.CHQ.STATUS)
        Y.MSG = 'NO.CHQ.TYPE' :VM: 'No Cheque Type found'
        Y.MSG<-1> = 'NOT ISSUED' :VM: 'Cheque is not issued to the Account'
        Y.MSG<-1> = 'RETURNED' :VM: 'Cheque is already returned'
        Y.MSG<-1> = 'PRESENTED'   :VM: 'Cheque is already presented'
        Y.MSG<-1> = 'STOPPED'     :VM: 'Cheque is already stopped'
        Y.MSG<-1> = 'NO.CHQ.REG'  :VM: 'No register found'
        FIND Y.CHQ.STATUS IN Y.MSG SETTING Y.NUM THEN
            E = Y.MSG<Y.NUM,2>
            RETURN
        END
    END
    R.NEW(INS.DUP.DUP.INSTR.REF.NO) = Y.INST.ISS.ID
    RETURN
END
