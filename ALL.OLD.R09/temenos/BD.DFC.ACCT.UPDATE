*-----------------------------------------------------------------------------
* <Rating>-31</Rating>
* updated by alin boby 20210303
* handle reverse tr through drawings
*-----------------------------------------------------------------------------
    SUBROUTINE BD.DFC.ACCT.UPDATE

    $INCLUDE GLOBUS.BP I_COMMON
    $INCLUDE GLOBUS.BP I_EQUATE
    $INCLUDE GLOBUS.BP I_F.LETTER.OF.CREDIT
    $INCLUDE GLOBUS.BP I_F.DRAWINGS
    $INCLUDE GLOBUS.BP I_F.ACCOUNT
    $INCLUDE GLOBUS.BP I_F.FUNDS.TRANSFER
    $INCLUDE JBL.BP I_F.BD.BTB.JOB.REGISTER
    $INCLUDE BP I_F.BD.L.DFC.ACCT.DETAILS



    GOSUB INIT
    GOSUB OPENFILES
    GOSUB PROCESS

    RETURN

*-------
INIT:
*-------
    FN.LC = 'F.LETTER.OF.CREDIT';              F.LC = ''
    FN.DR = 'F.DRAWINGS';                      F.DR = ''
    FN.AC = 'F.ACCOUNT';                       F.AC = ''
    FN.FT = 'F.FUNDS.TRANSFER';                F.FT = ''
    FN.BTB.JOB.REG = 'F.BD.BTB.JOB.REGISTER';  F.BTB.JOB.REG = ''
    FN.DFC.ACCT = 'F.BD.L.DFC.ACCT.DETAILS';   F.DFC.ACCT = ''
    RETURN

*---------
OPENFILES:
*---------
    CALL OPF(FN.LC,F.LC)
    CALL OPF(FN.DR,F.DR)
    CALL OPF(FN.AC,F.AC)
    CALL OPF(FN.FT,F.FT)
    CALL OPF(FN.BTB.JOB.REG,F.BTB.JOB.REG)
    CALL OPF(FN.DFC.ACCT,F.DFC.ACCT)

    CALL GET.LOC.REF('DRAWINGS','JOB.NUMBER',Y.JOB.NUMBER.POS)
    CALL GET.LOC.REF('LETTER.OF.CREDIT','JOB.NUMBER',Y.LC.JOB.NUMBER.POS)
    CALL GET.LOC.REF('DRAWINGS','DFC.AMT.AVAIL',Y.DFC.AMT.AVAIL.POS)
    CALL GET.LOC.REF('ACCOUNT','LINKED.TF.NO',Y.LINKED.TF.NO.POS)
    CALL GET.LOC.REF('FUNDS.TRANSFER','DFC.AMT.AVAIL',Y.TF.DFC.AMT.AVAIL.POS)
    RETURN

*--------
PROCESS:
*--------
    BEGIN CASE
    CASE APPLICATION EQ 'DRAWINGS'
        Y.DFC.ACCOUNT = R.NEW(TF.DR.DRAWDOWN.ACCOUNT)
        CALL F.READ(FN.AC,Y.DFC.ACCOUNT,R.ACCT.REC,F.AC,Y.ACCT.ERR)
        Y.CATEGORY = R.ACCT.REC<AC.CATEGORY>
        IF Y.CATEGORY EQ '4101' THEN
            Y.JOB.NO = R.NEW(TF.DR.LOCAL.REF)<1,Y.JOB.NUMBER.POS>
            CALL F.READ(FN.BTB.JOB.REG,Y.JOB.NO,R.JOB.REC,F.BTB.JOB.REG,Y.JOB.ERR)
            Y.MAIN.TF = R.JOB.REC<BTB.JOB.EX.TF.REF>
            CALL F.READU(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC,F.DFC.ACCT,Y.DFC.ACCT.ERR,"")
            FIND Y.MAIN.TF IN R.DFC.ACCT.REC<DFC.ACCT.REF.NO> SETTING FVPOS,MVPOS,SVPOS THEN

                Y.DFC.AVAIL.AMT = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS>
                IF R.NEW(TF.DR.RECORD.STATUS) EQ 'INAU' THEN
                    IF R.NEW(TF.DR.DOCUMENT.AMOUNT) GT Y.DFC.AVAIL.AMT THEN
                        GOSUB CHK.DFC.BAL1
                    END ELSE
                        R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> - R.NEW(TF.DR.DOCUMENT.AMOUNT)
                        CALL F.WRITE(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC)
                        CALL JOURNAL.UPDATE('')
                        SENSITIVITY = ''
                    END
                END ELSE
                    IF R.NEW(TF.DR.RECORD.STATUS) EQ 'RNAU' THEN
                        R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> +  R.NEW(TF.DR.DOCUMENT.AMOUNT)
                        CALL F.WRITE(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC)
                        CALL JOURNAL.UPDATE('')
                        SENSITIVITY = ''

                    END
                END

            END
        END

    CASE APPLICATION EQ 'FUNDS.TRANSFER'
        Y.DFC.ACCOUNT = R.NEW(FT.DEBIT.ACCT.NO)
        CALL F.READ(FN.AC,Y.DFC.ACCOUNT,R.ACCT.REC,F.AC,Y.ACCT.ERR)
        Y.CATEGORY = R.ACCT.REC<AC.CATEGORY>
        IF Y.CATEGORY EQ '4101' THEN
            Y.FT.CR.ACT.NO = R.NEW(FT.CREDIT.ACCT.NO)
            CALL F.READ(FN.AC,Y.FT.CR.ACT.NO,R.ACCT.REC,F.AC,Y.ACCT.ERR)

            Y.BTB.LC.NO = R.ACCT.REC<AC.LOCAL.REF><1,Y.LINKED.TF.NO.POS>
            CALL F.READ(FN.LC,Y.BTB.LC.NO,R.LC.REC,F.LC,Y.LC.ERR)

            Y.JOB.NO = R.LC.REC<TF.LC.LOCAL.REF><1,Y.LC.JOB.NUMBER.POS>
            CALL F.READ(FN.BTB.JOB.REG,Y.JOB.NO,R.JOB.REC,F.BTB.JOB.REG,Y.JOB.ERR)
            Y.MAIN.TF = R.JOB.REC<BTB.JOB.EX.TF.REF>
            CALL F.READU(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC,F.DFC.ACCT,Y.DFC.ACCT.ERR,"")

            FIND Y.MAIN.TF IN R.DFC.ACCT.REC<DFC.ACCT.REF.NO> SETTING FVPOS,MVPOS,SVPOS THEN
                R.NEW(FT.LOCAL.REF)<1,Y.TF.DFC.AMT.AVAIL.POS> = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS>
                Y.DFC.AVAIL.AMT = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS>
                IF R.NEW(FT.RECORD.STATUS) EQ 'INAU' THEN
                    IF R.NEW(FT.DEBIT.AMOUNT) GT Y.DFC.AVAIL.AMT THEN
                        GOSUB CHK.DFC.BAL
                    END ELSE
                        R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> - R.NEW(FT.DEBIT.AMOUNT)
                        CALL F.WRITE(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC)
                        CALL JOURNAL.UPDATE('')
                        SENSITIVITY = ''
                    END
                END ELSE
                    IF R.NEW(FT.RECORD.STATUS) EQ 'RNAU' THEN
                        R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> = R.DFC.ACCT.REC<DFC.ACCT.AMOUNT,MVPOS> + R.NEW(FT.DEBIT.AMOUNT)
                        CALL F.WRITE(FN.DFC.ACCT,Y.DFC.ACCOUNT,R.DFC.ACCT.REC)
                        CALL JOURNAL.UPDATE('')
                        SENSITIVITY = ''
                    END
                END

            END
        END
    CASE 1
    END CASE
    RETURN

*-----------
CHK.DFC.BAL:
*-----------
    AF = FT.DEBIT.AMOUNT
    ETEXT = "Insufficient Balance in DFC Account"
    CALL STORE.END.ERROR
    RETURN

*-----------
CHK.DFC.BAL1:
*-----------
    AF = TF.DR.DOCUMENT.AMOUNT
    ETEXT = "Insufficient Balance in DFC Account"
    CALL STORE.END.ERROR
    RETURN

END
