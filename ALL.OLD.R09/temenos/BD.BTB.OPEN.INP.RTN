*-----------------------------------------------------------------------------
* <Rating>-30</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE BD.BTB.OPEN.INP.RTN

    $INSERT I_EQUATE
    $INSERT I_COMMON
    $INSERT I_F.LETTER.OF.CREDIT
    $INSERT I_F.BD.BTB.JOB.REGISTER

    IF V$FUNCTION EQ 'I' AND (R.NEW(TF.LC.OPERATION) EQ "O" OR R.NEW(TF.LC.OPERATION) EQ "A") THEN
        GOSUB INITIALISE
        GOSUB PROCESS
    END
    RETURN

INITIALISE:

    FN.BD.BTB.JOB.REGISTER = "F.BD.BTB.JOB.REGISTER"
    F.BD.BTB.JOB.REGISTER = ""
    CALL OPF(FN.BD.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER)

    RETURN

PROCESS:
    GOSUB GET.LOC.REF.POS
    Y.JOB.NO = R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.NUMBER.POS>
    CALL F.READ(FN.BD.BTB.JOB.REGISTER,Y.JOB.NO,R.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER,Y.BTB.JOB.REG.ERR)
    IF R.NEW(TF.LC.LC.CURRENCY) NE R.BTB.JOB.REGISTER<BTB.JOB.JOB.CURRENCY> THEN
        AF = TF.LC.LC.CURRENCY
        ETEXT = "JOB Currency & BTB LC Currency Should be Same"
        CALL STORE.END.ERROR
        RETURN
    END ELSE
        Y.LC.AMT = R.NEW(TF.LC.LC.AMOUNT)
    END

    Y.JOB.ENT.AMT = R.BTB.JOB.REGISTER<BTB.JOB.TOT.BTB.AVL.AMT>

    IF Y.LC.AMT GT Y.JOB.ENT.AMT THEN
        Y.DIFF = Y.LC.AMT - Y.JOB.ENT.AMT
        AF = TF.LC.LC.AMOUNT
        ETEXT = "BTB LC AMOUNT EXCEEDS BY JOB ENTITLEMENT AMOUNT":Y.DIFF
        CALL STORE.END.ERROR
        RETURN
    END
    RETURN

GET.LOC.REF.POS:
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.NUMBER",Y.JOB.NUMBER.POS)

    RETURN
