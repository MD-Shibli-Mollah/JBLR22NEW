*-----------------------------------------------------------------------------
* <Rating>-70</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE BD.BTB.RATE.ENT.VAL
*---------------------------------------------------------------------------------
* This Rtn calculates the LC Wise BTB & PC Entitlement Amount base on BTB & PC
* entitlement Rate is given
*---------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.LETTER.OF.CREDIT
    $INSERT I_F.COMPANY
    $INSERT I_F.BD.BTB.JOB.REGISTER
*
    GOSUB INIT
    GOSUB OPENFILES
    GOSUB PROCESS
*
    RETURN
*
INIT:

    FN.LETTER.OF.CREDIT = "F.LETTER.OF.CREDIT"
    F.LETTER.OF.CREDIT = ""
    Y.LC.ERR = ''

    IF ID.NEW EQ '' THEN
        Y.LC.ID = ID.OLD
    END ELSE
        Y.LC.ID = ID.NEW
    END

    FN.COM = 'F.COMPANY'
    F.COM = ''

    FN.BD.BTB.JOB.REGISTER = 'F.BD.BTB.JOB.REGISTER'
    F.BD.BTB.JOB.REGISTER = ''


    RETURN
*
OPENFILES:
    CALL OPF(FN.LETTER.OF.CREDIT,F.LETTER.OF.CREDIT)
    CALL OPF(FN.COM,F.COM)
    CALL OPF(FN.BD.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER)
    RETURN
*
PROCESS:
    GOSUB GET.LOC.REF
    Y.NEW.EXIST = R.NEW(TF.LC.LOCAL.REF)<1,Y.NEW.EXIST.POS>
    Y.JOB.NO = R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.NO.POS>
    IF R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.CUR.POS> NE R.NEW(TF.LC.LC.CURRENCY) AND R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.EXC.RATE.POS> EQ '' THEN
        AF = TF.LC.LOCAL.REF
        AV = Y.JOB.EXC.RATE.POS
        ETEXT = "Should not be Null"
        CALL STORE.END.ERROR
        RETURN
    END
    IF R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.CUR.POS> EQ R.NEW(TF.LC.LC.CURRENCY) AND R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.EXC.RATE.POS> NE '' THEN
        AF = TF.LC.LOCAL.REF
        AV = Y.JOB.EXC.RATE.POS
        ETEXT = "Should not Allow Any Value"
        CALL STORE.END.ERROR
        RETURN
    END

    IF NOT(R.COM.REC<EB.COM.LOCAL.REF,Y.ADCODE.POS>) THEN
        ETEXT = "AD CODE DOES NOT EXIST FOR THIS COMPANY"
        CALL STORE.END.ERROR
        RETURN
    END

    BEGIN CASE
    CASE Y.NEW.EXIST EQ "NEW"
        IF Y.JOB.NO EQ '' THEN
            GOSUB PROCESS.NEW.RECORD
        END ELSE
            ETEXT = "For New Recording JOB Number Should Not Exist"
            CALL STORE.END.ERROR
            RETURN
        END
    CASE Y.NEW.EXIST = "EXIST"
        IF Y.JOB.NO EQ "" THEN
            AF = TF.LC.LOCAL.REF
            AV = Y.JOB.NO.POS
            ETEXT = "JOB NUMBER MISSING"
            CALL STORE.END.ERROR
            RETURN
        END
        IF NOT(R.BTB.JOB.REG.ERR) THEN
            AF = TF.LC.LOCAL.REF
            AV = Y.JOB.NO.POS
            ETEXT = "JOB NUMBER DOES NOT EXIST"
            CALL STORE.END.ERROR
            RETURN
        END
        GOSUB PROCESS.NEW.RECORD
    END CASE

    RETURN
*
PROCESS.NEW.RECORD:
    GOSUB PROCESS.ENT.CALC
    IF Y.TOT.ENT.PERC GE 100 THEN
        ETEXT = "Total Entitlement percentage should not be GE 100"
        CALL STORE.END.ERROR
        RETURN
    END ELSE
        Y.BTB.ENT.VALUE = (Y.FOB.VALUE * Y.BTB.RATE)/100
        Y.PC.ENT.VALUE = (Y.FOB.VALUE * Y.PC.RATE)/100
        Y.TOT.JOB.VALUE = Y.BTB.ENT.VALUE + Y.PC.ENT.VALUE
        R.NEW(TF.LC.LOCAL.REF)<1,Y.FOB.POS> = Y.FOB.VALUE
        R.NEW(TF.LC.LOCAL.REF)<1,Y.BTB.ENT.POS> = Y.BTB.ENT.VALUE
        R.NEW(TF.LC.LOCAL.REF)<1,Y.PC.ENT.POS> = Y.PC.ENT.VALUE
        R.NEW(TF.LC.LOCAL.REF)<1,Y.TOT.JOB.POS> = Y.TOT.JOB.VALUE
    END
    RETURN
*
PROCESS.ENT.CALC:
    Y.FREIGHT.CHRG = R.NEW(TF.LC.LOCAL.REF)<1,Y.CHRG.POS>
    Y.FOREIGN.CHRG = R.NEW(TF.LC.LOCAL.REF)<1,Y.FC.POS>
    Y.DOC.VAL.CHRG = R.NEW(TF.LC.LOCAL.REF)<1,Y.DOC.VAL.POS>
    Y.INS.AGT.CHRG = R.NEW(TF.LC.LOCAL.REF)<1,Y.INSCOM.POS>
    GOSUB CHECK.INCO.TERMS
    Y.TOT.CHRG = Y.FREIGHT.CHRG + Y.FOREIGN.CHRG + Y.DOC.VAL.CHRG + Y.INS.AGT.CHRG
    Y.FOB.VALUE = R.NEW(TF.LC.LC.AMOUNT) - Y.TOT.CHRG
    Y.BTB.RATE = R.NEW(TF.LC.LOCAL.REF)<1,Y.BTB.RATE.POS>
    Y.PC.RATE = R.NEW(TF.LC.LOCAL.REF)<1,Y.PC.RATE.POS>
    Y.TOT.ENT.PERC = Y.BTB.RATE + Y.PC.RATE
    RETURN
*
CHECK.INCO.TERMS:
    Y.SALES.TERM = R.NEW(TF.LC.LOCAL.REF)<1,Y.SALTERM.POS>
    IF Y.SALES.TERM EQ 'FOB(Free On Board)' AND Y.FREIGHT.CHRG NE '' THEN
        AF = TF.LC.LOCAL.REF
        AV = Y.SALTERM.POS
        ETEXT = "IncoTerms FOB Not Allows Fregiht Charge"
        CALL STORE.END.ERROR
        RETURN
    END
    RETURN
*
GET.LOC.REF:
    CALL F.READ(FN.COM,ID.COMPANY,R.COM.REC,F.COM,Y.COM.ERR)
    CALL F.READ(FN.LETTER.OF.CREDIT,Y.LC.ID,R.LEETER.OF.CREDIT,F.LETTER.OF.CREDIT,Y.LC.ERR)
    CALL F.READ(FN.BD.BTB.JOB.REGISTER,Y.JOB.NO,R.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER,R.BTB.JOB.REG.ERR)

    CALL GET.LOC.REF("COMPANY","AD.BRANCH.CODE",Y.ADCODE.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.NUMBER",Y.JOB.NO.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","NEW.EXIST.JOBNO",Y.NEW.EXIST.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.ENT.CUR",Y.JOB.CUR.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.EXCH.RATE",Y.JOB.EXC.RATE.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","DOC.VALUE.FC",Y.DOC.VAL.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","CHARGES.IN.FC",Y.FC.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","FREIGHT.CHARGES",Y.CHRG.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","INS.AGENT.COMM",Y.INSCOM.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","FOB.VALUE",Y.FOB.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","BTB.ENT.RATE",Y.BTB.RATE.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","PC.ENT.RATE",Y.PC.RATE.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","BTB.ENT.AMT",Y.BTB.ENT.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","PC.ENT.AMT",Y.PC.ENT.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","TOT.ENT.AMT",Y.TOT.JOB.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","SALES.TERM",Y.SALTERM.POS)
    RETURN
END
