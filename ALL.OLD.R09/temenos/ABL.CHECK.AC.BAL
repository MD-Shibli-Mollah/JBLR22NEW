*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------
* <Rating>504</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE ABL.CHECK.AC.BAL
!-----------------------------------------------------------------------------!
**********Notice Condtion For Savings And SNTD Account
**********Developed By Manik-20100922
**********Specification : It Checks whether Notice is given or not for withdrawal of certain amount
**********                money defined in the ABP.H.NT.PM
!------------------------------------------------------------------------------!
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.COMPANY
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.TELLER
    $INSERT I_F.TRANSACTION
    $INSERT I_F.TELLER.TRANSACTION
    $INSERT I_F.ABL.H.AC.VIOLATION
    $INSERT I_F.ACCT.GROUP.CONDITION
*$INSERT I_F.ABL.H.NOTICE.WITHDRAWAL
    $INSERT I_F.ABP.H.NOTICE.WITHDRAWAL
*$INSERT I_F.ABL.H.NOTICE.PARAMETER
    $INSERT I_F.ABP.H.NT.PM

*DEBUG
*    IF V$FUNCTION EQ 'I' OR V$FUNCTION EQ 'C' ELSE RETURN
    IF APPLICATION EQ 'FUNDS.TRANSFER' OR APPLICATION EQ 'TELLER' ELSE RETURN

    IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
        IF R.NEW(FT.DEBIT.ACCT.NO) MATCHES '3A...' THEN RETURN
    END
    GOSUB INITIALISE
    GOSUB OPEN.FILES
    GOSUB GET.TRANS.INFO
    GOSUB CHK.CLEARED.BALANCE

    RETURN

INITIALISE:
*==========
    Y.DR.CR.MARKER = ''
    TRANS.CODE.1 = ''
    Y.DEBIT.ACCT = ''
    Y.TRANS.AMT = ''
    Y.TELLER.TRANS = ''
    Y.WORKING.BALANCE = ''
    Y.NOTICE.AMOUNT = ''
    Y.NOTICE.PERIOD = ''
    Y.NOTICE.GRP = ''
    Y.NOTICE.GRP.ID=''
    R.NOTICE.PARAM = ''
    RETURN

OPEN.FILES:
*==========
*    FN.NOTICE.PARAM ='F.ABL.H.NOTICE.PARAMETER'
    FN.NOTICE.PARAM ='F.ABP.H.NT.PM'

    F.NOTICE.PARAM =''
    CALL OPF(FN.NOTICE.PARAM,F.NOTICE.PARAM)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

*    FN.NOTICE.WITHDRAWAL = 'F.ABL.H.NOTICE.WITHDRAWAL'
    FN.NOTICE.WITHDRAWAL = 'F.ABP.H.NOTICE.WITHDRAWAL'
    F.NOTICE.WITHDRAWAL = ''
    CALL OPF(FN.NOTICE.WITHDRAWAL,F.NOTICE.WITHDRAWAL)

    FN.ABL.H.AC.VIOLATION = 'F.ABL.H.AC.VIOLATION'
    F.ABL.H.AC.VIOLATION = ''
    CALL OPF(FN.ABL.H.AC.VIOLATION,F.ABL.H.AC.VIOLATION)

    RETURN

GET.TRANS.INFO:
*==============
    IF APPLICATION EQ 'TELLER' THEN
        Y.DR.CR.MARKER = R.NEW(TT.TE.DR.CR.MARKER)
        IF Y.DR.CR.MARKER = 'DEBIT' THEN
            Y.DEBIT.ACCT = R.NEW(TT.TE.ACCOUNT.1)
            Y.TRANS.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
            Y.VALUE.DATE = R.NEW(TT.TE.VALUE.DATE.1)
        END ELSE
            Y.DEBIT.ACCT = R.NEW(TT.TE.ACCOUNT.2)
            Y.TRANS.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.2)
            Y.VALUE.DATE = R.NEW(TT.TE.VALUE.DATE.2)
        END
        Y.CHEQ.NUMBER=R.NEW(TT.TE.CHEQUE.NUMBER)
        Y.OVERRIDE.NO = R.NEW(TT.TE.OVERRIDE)
        Y.OVERRIDE.CNT = DCOUNT(Y.OVERRIDE.NO,@VM)
        Y.OVERRIDE.CNT +=1
    END ELSE
        IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
            Y.DEBIT.ACCT = R.NEW(FT.DEBIT.ACCT.NO)
            Y.TRANS.AMT = R.NEW(FT.DEBIT.AMOUNT)
            IF NOT(Y.TRANS.AMT) THEN Y.TRANS.AMT = R.NEW(FT.CREDIT.AMOUNT)
            Y.VALUE.DATE = R.NEW(FT.DEBIT.VALUE.DATE)
            IF NOT(Y.VALUE.DATE) THEN Y.VALUE.DATE = R.NEW(FT.CREDIT.VALUE.DATE)
            Y.CHEQ.NUMBER=R.NEW(FT.CHEQUE.NUMBER)
            Y.OVERRIDE.NO = R.NEW(FT.OVERRIDE)
            Y.OVERRIDE.CNT = DCOUNT(Y.OVERRIDE.NO,@VM)
            Y.OVERRIDE.CNT +=1
        END
    END

    RETURN

CHK.CLEARED.BALANCE:
*===================
!-------For Notice Period-----------!

    DATE.1 = ''
    DATE.2 = Y.VALUE.DATE
    DAYS = 'C'
    Y.POS.J=""
    CALL F.READ(FN.ACCOUNT,Y.DEBIT.ACCT,R.ACCOUNT,F.ACCOUNT,ACCT.READ.ERR)
    Y.WORKING.BALANCE = R.ACCOUNT<AC.WORKING.BALANCE> + Y.TRANS.AMT
    Y.NOTICE.GRP = R.ACCOUNT<AC.CONDITION.GROUP>:R.ACCOUNT<AC.CURRENCY>
    CALL F.READ(FN.NOTICE.PARAM,Y.NOTICE.GRP,R.NOTICE.PARAM,F.NOTICE.PARAM,NOTICE.PARAM.ERR)

    IF R.NOTICE.PARAM EQ '' THEN RETURN
    Y.NOTICE.AMOUNT =  R.NOTICE.PARAM<NP.NOTICE.AMOUNT>
    Y.NOTICE.PERIOD  = R.NOTICE.PARAM<NP.NOTICE.DAYS>

*    IF ( Y.NOTICE.GRP EQ Y.NOTICE.GRP.ID ) AND  ( Y.TRANS.AMT GE Y.NOTICE.AMOUNT OR ( Y.TRANS.AMT GT (Y.WORKING.BALANCE/4))) THEN

    IF ( Y.TRANS.AMT GT Y.NOTICE.AMOUNT OR ( Y.TRANS.AMT GT (Y.WORKING.BALANCE/4))) THEN
        CALL F.READ(FN.NOTICE.WITHDRAWAL,Y.DEBIT.ACCT,R.NOTICE.WITHDRAWAL,F.NOTICE.WITHDRAWAL,NOTICE.WITH.ERR)
        IF R.NOTICE.WITHDRAWAL THEN
            DATE.1 = R.NOTICE.WITHDRAWAL<NW.NOTICE.DATE>
            CALL CDD ('', DATE.1, DATE.2, DAYS)
            BEGIN CASE
            CASE DAYS LT Y.NOTICE.PERIOD
                TEXT = "NO NOTICE GIVEN FOR WITHDRAWAL"
                CALL STORE.OVERRIDE(Y.OVERRIDE.CNT)
            CASE DAYS GT 30
                TEXT = "NO NOTICE GIVEN FOR WITHDRAWAL"
                CALL STORE.OVERRIDE(Y.OVERRIDE.CNT)
            CASE 1
*                CALL F.DELETE(FN.NOTICE.WITHDRAWAL,Y.DEBIT.ACCT)
                DELETE F.NOTICE.WITHDRAWAL,Y.DEBIT.ACCT
!                Y.POS.J=1
            END CASE
        END
        ELSE
            TEXT = "NO NOTICE GIVEN FOR WITHDRAWAL"
            CALL STORE.OVERRIDE(Y.OVERRIDE.CNT)
        END

    END

    Y.TOT.OVE.CNT.1 = '' ; VAR.TO.SEARCH.1 = ''
    Y.TOT.OVE.CNT.1 = DCOUNT(Y.OVERRIDE.NO,@VM)
    VAR.TO.SEARCH.1 = 'MAX NO. OF WDLS. FOR THIS TXN CODE BEING EXCEEDED'
    Y.POS.I=""
    DAYS="C"
    Y.OVERRIDE.NO.LAST=""
    !DEBUG
    FOR I = 1 TO Y.TOT.OVE.CNT.1
        IF INDEX(Y.OVERRIDE.NO<I>,VAR.TO.SEARCH.1,1) THEN
            CALL F.READ(FN.NOTICE.WITHDRAWAL,Y.DEBIT.ACCT,R.NOTICE.WITHDRAWAL,F.NOTICE.WITHDRAWAL,NOTICE.WITH.ERR)
            IF R.NOTICE.WITHDRAWAL THEN
                DATE.1 = R.NOTICE.WITHDRAWAL<NW.NOTICE.DATE>
                CALL CDD ('', DATE.1, DATE.2, DAYS)
                IF DAYS GT Y.NOTICE.PERIOD AND DAYS LE 30 THEN
                    Y.POS.I=I
                    DELETE F.NOTICE.WITHDRAWAL,Y.DEBIT.ACCT
                END
            END
 !           ELSE
 !               IF Y.POS.J EQ 1 THEN
 !                   Y.POS.I=I
 !               END
 !           END

        END
        ELSE
            IF I EQ Y.TOT.OVE.CNT.1 THEN
                Y.OVERRIDE.NO.LAST=Y.OVERRIDE.NO.LAST:Y.OVERRIDE.NO<I>
            END
            ELSE
                Y.OVERRIDE.NO.LAST=Y.OVERRIDE.NO.LAST:Y.OVERRIDE.NO<I>:@VM
            END
        END
    NEXT
    IF RIGHT(Y.OVERRIDE.NO.LAST,1) EQ @VM THEN
        Y.OVERRIDE.NO.LAST=Y.OVERRIDE.NO.LAST[1,LEN(Y.OVERRIDE.NO.LAST)-1]
    END

    IF Y.POS.I THEN
        IF Y.POS.I EQ '1' THEN
            IF APPLICATION EQ 'TELLER' THEN
                R.NEW(TT.TE.OVERRIDE)=""
            END
            IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
                R.NEW(FT.OVERRIDE)=""
            END
        END
        ELSE
            IF APPLICATION EQ 'TELLER' THEN
                R.NEW(TT.TE.OVERRIDE)=Y.OVERRIDE.NO.LAST
            END
            IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
                R.NEW(FT.OVERRIDE)=Y.OVERRIDE.NO.LAST
            END
        END

    END

    RETURN
END
