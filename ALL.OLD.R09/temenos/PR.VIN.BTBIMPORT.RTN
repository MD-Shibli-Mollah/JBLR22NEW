*-----------------------------------------------------------------------------
* <Rating>1222</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE PR.VIN.BTBIMPORT.RTN

*------------------------------------------------------------------------------
*THIS ROUTINE IS TO UPDATE THE IMPORT LC DETAILS TO THE JOB REGISTER TABLE
*IF THE AMOUNT EXCEEDS THE AVAILABLE IT THROWS OVERRIDE
*DURING OPEN OPRATION




* application input routine attached to the lc,ibtb.excess.open version

*---------------------------------------------------------------------------
*
*
*---------------------------
*INSERT FILES INCLUDE
*---------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.LETTER.OF.CREDIT
    $INSERT I_F.PR.H.BTB.JOB.REGISTER
    $INSERT I_F.COMPANY
    $INSERT I_F.LC.TYPES
    $INSERT I_F.INTERCO.PARAMETER
    $INSERT I_F.PR.T.BTB.JOB.NO.LC.REF
*
*
* DEBUG
    RUNNING.UNDER.BATCH=1
    GOSUB INIT
    GOSUB GET.LOC.REF.VAL
    GOSUB JOB.UPDATE
    GOSUB DEL.JOB
*
    RUNNING.UNDER.BATCH=0
    RETURN
*
*----------------
INIT:
*----------------

*initialising and open files
    FN.PR.H.BTB.JOB.REGISTER="F.PR.H.BTB.JOB.REGISTER"
    F.PR.H.BTB.JOB.REGISTER= ''
    FN.LETTER.OF.CREDIT="F.LETTER.OF.CREDIT"
    F.LETTER.OF.CREDIT= ''
    FN.LC.TYPE="F.LC.TYPES"
    F.LC.TYPE= ''
    FN.PR.T.BTB.CUSTOMER.JOB.NO = "F.PR.T.BTB.CUSTOMER.JOB.NO"
    F.PR.T.BTB.CUSTOMER.JOB.NO = ""
    R.PR.H.BTB.JOB.REGISTER = ''
    FN.PR.T.BTB.JOB.NO.LC.REF="F.PR.T.BTB.JOB.NO.LC.REF"
    F.PR.T.BTB.JOB.NO.LC.REF= ' '
    R.PR.T.BTB.JOB.NO.LC.REF= ' '
    Y.NULL="NULL"
*
    CALL OPF(FN.PR.T.BTB.CUSTOMER.JOB.NO,F.PR.T.BTB.CUSTOMER.JOB.NO)
    CALL OPF(FN.PR.T.BTB.JOB.NO.LC.REF,F.PR.T.BTB.JOB.NO.LC.REF)
    CALL OPF(FN.PR.H.BTB.JOB.REGISTER,F.PR.H.BTB.JOB.REGISTER)
    CALL OPF(FN.LETTER.OF.CREDIT,F.LETTER.OF.CREDIT)
    CALL OPF(FN.LC.TYPE,F.LC.TYPE)
*
    RETURN
*-----------
GET.LOC.REF.VAL:
*-----------
!CALL GET.LOC.REF("LETTER.OF.CREDIT","ADVISE.REF.NO",Y.ADV.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","FOB.VALUE",Y.FOB.VAL.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","ENTITLEMENT.PER",Y.ENT.PR.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","NEW.EXIST.JOBNO",Y.NEW.EXIST.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.VALUE",Y.JOB.VAL.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.ENTITLEMENT", Y.JOB.ENT.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.NO",Y.JOB.NO.POS)
    RETURN
*-----------
JOB.UPDATE:
*-----------
    Y.OPERATION = R.NEW(TF.LC.OPERATION)
    IF Y.OPERATION EQ 'O' OR Y.OPERATION EQ 'A' AND V$FUNCTION EQ 'I' OR V$FUNCTION EQ 'C' OR V$FUNCTION EQ 'A' THEN

        Y.ID=ID.NEW
        Y.TYPE=R.NEW(TF.LC.LC.TYPE)
        CALL F.READ(FN.LC.TYPE,Y.TYPE,R.LC.TYPE,F.LC.TYPE,Y.ERR)
        Y.LC.TYPE=R.LC.TYPE<LC.TYP.IMPORT.EXPORT>
        CALL F.READ(FN.LETTER.OF.CREDIT,Y.ID,R.LETTER.OF.CREDIT,F.LETTER.OF.CREDIT,Y.ERR)
*extracting job number
        Y.JOB.NO=R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.NO.POS>
        Y.LC.OPERATION=R.NEW(TF.LC.OPERATION)
        CURR.NO=R.NEW(TF.LC.CURR.NO)
*checking type and operation
        IF Y.LC.TYPE EQ "I" THEN
            Y.BTB.LC.AMOUNT=R.NEW(TF.LC.LC.AMOUNT)
            Y.CCY=R.NEW(TF.LC.LC.CURRENCY)
            AMT1=''
            AMT2=''
*getting the position of local reference field
*checking ccy and lccy

            IF Y.CCY NE LCCY THEN
*converting to local currency
                CALL EXCHRATE('1',Y.CCY,Y.BTB.LC.AMOUNT,LCCY,AMT1,'','','','',RET.CODE)
                Y.LC.AMOUNT1=AMT1
            END ELSE
                Y.LC.AMOUNT1=Y.BTB.LC.AMOUNT
            END

            Y.ID=ID.NEW
            Y.CCY=R.NEW(TF.LC.LC.CURRENCY)
            CALL F.READ(FN.PR.H.BTB.JOB.REGISTER,Y.JOB.NO,R.PR.H.BTB.JOB.REGISTER,F.PR.H.BTB.JOB.REGISTER,Y.ERR)
            Y.AVL.ENT.VAL = R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.LCY>
            Y.EXP.LC.CCY = R.PR.H.BTB.JOB.REGISTER<BTB.JOB.EXPORT.LC.CY,1>
            IF Y.CCY NE Y.EXP.LC.CCY THEN
                CALL EXCHRATE('1',LCCY,Y.LC.AMOUNT1,Y.EXP.LC.CCY,AMT2,'','','','',RET.CODE)
                Y.LC.AMOUNT=AMT2
            END ELSE
                Y.LC.AMOUNT=Y.BTB.LC.AMOUNT
            END
*checking the condition if entilemennt value is not equal to null
            IF R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CON.FOB.VAL> NE '' OR R.PR.H.BTB.JOB.REGISTER<BTB.JOB.ENTITLMNT.VL> NE '' THEN
*calculating sum of fob value
                Y.VAL1=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CON.FOB.VAL>
                Y.VAL=SUM(Y.VAL1)
*calculating sum of entitlment value in lcy
                Y.VAL2=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.ENTITLMNT.CY>
                Y.VAL3=SUM(Y.VAL2)
                Y.VAL.FC1=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.ENTITLMNT.VL>
                Y.VAL.FC=SUM(Y.VAL.FC1)
*calculating totla contract lcy
                Y.VAL.AMT.FC=Y.LC.AMOUNT + SUM(R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL>)
                Y.TOT.CONT.FC=Y.VAL.AMT.FC
                Y.VAL4=Y.LC.AMOUNT1 + SUM(R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY>)
                Y.CONTRACT.LCY=Y.VAL4
                Y.TOT.CONT.LCY=Y.CONTRACT.LCY
                R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.ENT.POS>=Y.TOT.CONT.FC
                Y.COUNT=DCOUNT(R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF>,VM)
                Y.COUNT1=Y.COUNT+1
                Y.CONT.VAL=Y.LC.AMOUNT
                Y.DATE=R.NEW(TF.LC.ADVICE.EXPIRY.DATE)
                Y.TOT.ENT.LCY=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.ENT.LCY>
                Y.TOT.CON.LCY=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CON.LCY>
                Y.TOT.CON.FC =R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CON.FC>
                Y.TOT.ENT.FC=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.ENT.FC>
*calculating available lc amount
                Y.AVL.ENT.LCY=Y.TOT.ENT.LCY + Y.TOT.CON.LCY - Y.TOT.CONT.LCY
                Y.AVL.ENT.FC=Y.TOT.ENT.FC + Y.TOT.CON.FC - Y.TOT.CONT.FC
                GOSUB GET.LOC.REF.VAL

                IF Y.LC.AMOUNT GT Y.AVL.ENT.FC THEN
                    IF V$FUNCTION NE 'A' THEN
                        GOSUB OVERIDE.CHCK
                    END
                    IF TEXT="Y" OR V$FUNCTION EQ 'A' THEN
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>=-Y.DIFF
                        Y.AMT=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
                        Y.ID=ID.NEW
*updating the job register table
                        R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.ENT.POS>=Y.AMT
!Y.ADV.NO=R.NEW(TF.LC.LOCAL.REF)<1,Y.ADV.POS>
                        Y.ADV.NO = R.NEW(TF.LC.OLD.LC.NUMBER)
                    END ELSE
                        RETURN
                    END
                    IF V$FUNCTION EQ 'A' THEN

                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.LCY>=Y.AVL.ENT.LCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.LCY>=Y.TOT.CONT.LCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF,Y.COUNT1>=Y.ID
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.COUNT1>=Y.CCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.EX.DATE,Y.COUNT1>=Y.DATE
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.COUNT1>=Y.CONT.VAL
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.COUNT1>=Y.LC.AMOUNT1
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.FC>=Y.TOT.CONT.FC
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>=Y.AVL.ENT.FC
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.ADV.NO,Y.COUNT1>=Y.ADV.NO

                        CALL F.WRITE(FN.PR.H.BTB.JOB.REGISTER,Y.JOB.NO,R.PR.H.BTB.JOB.REGISTER)

!Y.SOURCE="BTB.JOB.REGISTER"
!Y.MESSAGE="PR.H.BTB.JOB.REGISTER,PR.BTB/I/PROCESS,,":Y.JOB.NO:",AVL.ENT.LCY::=":Y.AVL.ENT.LCY:",TOT.CONT.LCY::=":Y.TOT.CONT.LCY:",IMPORT.LC.RF:":Y.COUNT1:":=":Y.ID:",IMPORT.LC.CY:":Y.COUNT1:":=":Y.CCY:",CONT.EX.DATE:":Y.COUNT1:":=":Y.DATE:",CONTRACT.VAL:":Y.COUNT1:":=":Y.CONT.VAL:",CONT.VAL.LCY:":Y.COUNT1:":=":Y.LC.AMOUNT1:",TOT.CONT.FC::=":Y.TOT.CONT.FC:",AVL.ENT.FC::=":Y.AVL.ENT.FC:",IMPORT.LC.ADV.NO:":Y.COUNT1:":=":Y.ADV.NO:
!CALL OFS.GLOBUS.MANAGER(Y.SOURCE,Y.MESSAGE)
*this is the common variable used to avoid fatal error
                        SENSITIVITY=''
                    END
                END ELSE
                    R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.ENT.POS>=Y.AMT
!Y.ADV.NO=R.NEW(TF.LC.LOCAL.REF)<1,Y.ADV.POS>
                    Y.ADV.NO = R.NEW(TF.LC.OLD.LC.NUMBER)
                    IF V$FUNCTION EQ 'A' THEN

                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF,Y.COUNT1>=Y.ID
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.ADV.NO,Y.COUNT1>=Y.ADV.NO
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.COUNT1>=Y.CCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.COUNT1>=Y.CONT.VAL
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.COUNT1>=Y.LC.AMOUNT1
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.EX.DATE,Y.COUNT1>=Y.DATE
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.LCY>=Y.TOT.CONT.LCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.LCY>=Y.AVL.ENT.LCY
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.FC>=Y.TOT.CONT.FC
                        R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>=Y.AVL.ENT.FC

                        CALL F.WRITE(FN.PR.H.BTB.JOB.REGISTER,Y.JOB.NO,R.PR.H.BTB.JOB.REGISTER)

!Y.SOURCE="BTB.JOB.REGISTER"
!Y.MESSAGE="PR.H.BTB.JOB.REGISTER,PR.BTB/I/PROCESS,,":Y.JOB.NO:",IMPORT.LC.RF:":Y.COUNT1:":=":Y.ID:",IMPORT.LC.ADV.NO:":Y.COUNT1:":=":Y.ADV.NO:",IMPORT.LC.CY:":Y.COUNT1:":=":Y.CCY:",CONTRACT.VAL:":Y.COUNT1:":=":Y.CONT.VAL:",CONT.VAL.LCY:":Y.COUNT1:":=":Y.LC.AMOUNT1:",CONT.EX.DATE:":Y.COUNT1:":=":Y.DATE:",TOT.CONT.LCY::=":Y.TOT.CONT.LCY:",AVL.ENT.LCY::=":Y.AVL.ENT.LCY:",TOT.CONT.FC::=":Y.TOT.CONT.FC:",AVL.ENT.FC::=":Y.AVL.ENT.FC
!CALL OFS.GLOBUS.MANAGER(Y.SOURCE,Y.MESSAGE)
                        SENSITIVITY = ''
                    END
                END
                Y.CUS = FIELD(Y.JOB.NO,".",2)
                CALL CONCAT.FILE.UPDATE(FN.PR.T.BTB.CUSTOMER.JOB.NO,Y.CUS,Y.JOB.NO,'I','AL')
                Y.CONT.ID=ID.NEW
                CALL CONCAT.FILE.UPDATE(FN.PR.T.BTB.JOB.NO.LC.REF,Y.CONT.ID,Y.JOB.NO,'I','AL')
            END
        END
    END
    RETURN
*for delete and reverse operation
*----------------
DEL.JOB:
*----------------
*    IF V$FUNCTION EQ 'D' OR V$FUNCTION EQ 'R' THEN
    IF V$FUNCTION EQ 'A' AND R.NEW(TF.LC.RECORD.STATUS) EQ 'RNAU' THEN
        TEXT="LC.RTN.ENTITLEMENT.JOB.AF.RECAL"
        CALL STORE.OVERRIDE(CURR.NO)
        CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.NO",Y.JOB.NO.POS)
*checking override msg
        IF TEXT = "Y" THEN
            BEGIN CASE
*   CASE R.NEW(TF.LC.LOCAL.REF)<1,Y.NEW.EXIST.POS> EQ "NEW"
*      Y.CONT.ID=ID.NEW
*read btb job number from respective contract
*     CALL F.READ(FN.PR.T.BTB.JOB.NO.LC.REF,Y.CONT.ID,R.BTB.JOB.NO.LC.REF,F.BTB.JOB.NO.LC.REF,Y.ERR)
*    Y.JOB.NUM = R.PR.T.BTB.JOB.NO.LC.REF<BTB.JOB.NO>
*delete that record from concat table
*   CALL CONCAT.FILE.UPDATE(FN.PR.T.BTB.JOB.NO.LC.REF,Y.CONT.ID,Y.JOB.NUM,'D','AL')
*raed btb job register table
*if this field is set to exist

            CASE R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.NO.POS> NE ''

                Y.CONT.ID=ID.NEW
                Y.NULL=""
                CALL F.READ(FN.PR.T.BTB.JOB.NO.LC.REF,Y.CONT.ID,R.PR.T.BTB.JOB.NO.LC.REF,F.PR.T.BTB.JOB.NO.LC.REF,Y.ERR)
                Y.JOB.NUM = R.PR.T.BTB.JOB.NO.LC.REF<BTB.JOB.NO>
                CALL CONCAT.FILE.UPDATE(FN.PR.T.BTB.JOB.NO.LC.REF,Y.CONT.ID,Y.JOB.NUM,'D','AL')
                CALL F.READ(FN.PR.H.BTB.JOB.REGISTER,Y.JOB.NUM,R.PR.H.BTB.JOB.REGISTER,F.PR.H.BTB.JOB.REGISTER,Y.ERR)
                FINDSTR Y.CONT.ID IN R.PR.H.BTB.JOB.REGISTER SETTING Y.CON.POS1,Y.CON.POS ELSE Y.CON.POS=0
*calculating total and available lcy
                Y.TOT.CONT.FC=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.FC>-R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.CON.POS>
                Y.TOT.CONT.LCY=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.LCY>- R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.CON.POS>
                Y.AVL.ENT.LCY=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.CON.POS> + R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.LCY>
                Y.AVL.ENT.FC=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.CON.POS>+ R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
*deleting the respective contract
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF,Y.CON.POS>= Y.NULL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.CON.POS>= Y.NULL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.CON.POS>= Y.NULL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.CON.POS>= Y.NULL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.EX.DATE,Y.CON.POS>= Y.NULL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.ADV.NO>=Y.NULL
                Y.CONT.RF=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF,Y.CON.POS>
                Y.CCY= R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.CON.POS>
                Y.CONT.VAL=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.CON.POS>
                Y.CONT.VAL.LCY=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.CON.POS>
                Y.EX.DATE=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.EX.DATE,Y.CON.POS>
                Y.ADV.NO=R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.ADV.NO>

                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.RF,Y.CON.POS>=Y.CONT.RF
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.CY,Y.CON.POS>=Y.CCY
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.IMPORT.LC.ADV.NO,Y.CON.POS>=Y.ADV.NO
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONTRACT.VAL,Y.CON.POS>=Y.CONT.VAL
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.VAL.LCY,Y.CON.POS>=Y.CONT.VAL.LCY
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.CONT.EX.DATE,Y.CON.POS>=Y.EX.DATE
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.LCY>=Y.TOT.CONT.LCY
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.LCY>=Y.AVL.ENT.LCY
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>=Y.AVL.ENT.FC
                R.PR.H.BTB.JOB.REGISTER<BTB.JOB.TOT.CONT.FC>=Y.TOT.CONT.FC

                CALL F.WRITE(FN.PR.H.BTB.JOB.REGISTER,Y.JOB.NUM,R.PR.H.BTB.JOB.REGISTER)

!Y.SOURCE="BTB.JOB.REGISTER"
!Y.MESSAGE = "PR.H.BTB.JOB.REGISTER,PR.BTB/I/PROCESS,,":Y.JOB.NUM:",IMPORT.LC.RF:":Y.CON.POS:":=":Y.CONT.RF:",IMPORT.LC.CY:":Y.CON.POS:":=":Y.CCY:",IMPORT.LC.ADV.NO:":Y.CON.POS:":=":Y.ADV.NO:",IMPORT.LC.ADV.NO:":Y.CON.POS:":=":Y.ADV.NO:",CONTRACT.VAL:":Y.CON.POS:":=":Y.CONT.VAL:",CONT.VAL.LCY:":Y.CON.POS:":=":Y.CONT.VAL.LCY:",CONT.EX.DATE:":Y.CON.POS:":=":Y.EX.DATE:",TOT.CONT.LCY::=":Y.TOT.CONT.LCY:",AVL.ENT.LCY::=":Y.AVL.ENT.LCY:",AVL.ENT.FC::=":Y.AVL.ENT.FC:",TOT.CONT.FC::=":Y.TOT.CONT.FC
!CALL OFS.GLOBUS.MANAGER(Y.SOURCE,Y.MESSAGE)
                SENSITIVITY= ''
            END CASE
        END ELSE
            RETURN
        END
    END ELSE
        RETURN
    END
    RETURN
*------------------
OVERIDE.CHCK:
*------------------
*    IF R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC> GT 0 THEN
*        Y.DIFF=Y.LC.AMOUNT-R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
*    END ELSE
*        Y.DIFF=Y.LC.AMOUNT + R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
*    END
*    Y.PR.AVL=Y.DIFF/Y.AVL.ENT.FC
* Exim changes: Check LCCY instead of FCY for OVERRIDE
    IF R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC> GT 0 THEN
        Y.DIFF=Y.LC.AMOUNT - R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
    END ELSE
        Y.DIFF=Y.LC.AMOUNT + R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC>
    END
    Y.PR.AVL=Y.DIFF/Y.AVL.ENT.FC
    IF Y.PR.AVL LT 0 THEN
        Y.PR.AVL= Y.PR.AVL * (-1)
    END
    Y.PR.AVL=FMT(Y.PR.AVL,"R2#10")
*if lc amount working override thrown
*    IF R.PR.H.BTB.JOB.REGISTER<BTB.JOB.AVL.ENT.FC> LT 0 THEN
    TEXT="LC AMOUNT EXCEEDS":"BY":SPACE(2):Y.DIFF
    CALL STORE.OVERRIDE(CURR.NO)
*    END
    RETURN
END
