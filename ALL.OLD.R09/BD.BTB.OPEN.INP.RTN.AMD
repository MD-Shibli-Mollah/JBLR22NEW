*-----------------------------------------------------------------------------
* <Rating>70</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE BD.BTB.OPEN.INP.RTN.AMD

    $INSERT I_EQUATE
    $INSERT I_COMMON
    $INSERT I_F.LETTER.OF.CREDIT
    $INSERT I_F.BD.BTB.JOB.REGISTER
    $INSERT I_GTS.COMMON

    IF OFS.VAL.ONLY THEN RETURN
    IF V$FUNCTION EQ 'I' AND R.NEW(TF.LC.OPERATION) EQ "A" THEN
        GOSUB INITIALISE
        GOSUB PROCESS
    END
    RETURN

INITIALISE:

    FN.BD.BTB.JOB.REGISTER = "F.BD.BTB.JOB.REGISTER"
    F.BD.BTB.JOB.REGISTER = ""
    CALL OPF(FN.BD.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER)

    RETURN

PROCESS:
    !DEBUG
    GOSUB GET.LOC.REF.POS
    Y.JOB.NO = R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.NUMBER.POS>
    CALL F.READ(FN.BD.BTB.JOB.REGISTER,Y.JOB.NO,R.BTB.JOB.REGISTER,F.BD.BTB.JOB.REGISTER,Y.BTB.JOB.REG.ERR)
    IF R.NEW(TF.LC.LC.AMOUNT) GT R.OLD(TF.LC.LC.AMOUNT) THEN
        Y.INC.BTB.LCAMT = R.NEW(TF.LC.LC.AMOUNT) - R.OLD(TF.LC.LC.AMOUNT)
        IF NOT(R.BTB.JOB.REGISTER) THEN
            AF = TF.LC.LOCAL.REF
            AV = Y.JOB.NUMBER.POS
            ETEXT = "JOB Number Should not be Null"
            CALL STORE.END.ERROR
            RETURN
        END
        Y.JOB.ENT.AMT = R.BTB.JOB.REGISTER<BTB.JOB.TOT.BTB.AVL.AMT>
        R.NEW(TF.LC.LOCAL.REF)<1,Y.JOB.BTB.ENT.AMT.POS> = R.BTB.JOB.REGISTER<BTB.JOB.TOT.BTB.AVL.AMT>
        IF Y.INC.BTB.LCAMT GT R.BTB.JOB.REGISTER<BTB.JOB.TOT.BTB.AVL.AMT> THEN
            Y.DIFF = Y.INC.BTB.LCAMT - R.BTB.JOB.REGISTER<BTB.JOB.TOT.BTB.AVL.AMT>
            AF = TF.LC.LC.AMOUNT
            ETEXT = "EXCEEDS BY JOB ENTITLEMENT AMOUNT  ":Y.DIFF
            CALL STORE.END.ERROR
            RETURN
        END
    END
    RETURN

GET.LOC.REF.POS:
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.NUMBER",Y.JOB.NUMBER.POS)
    CALL GET.LOC.REF("LETTER.OF.CREDIT","JOB.ENTIT.AMT",Y.JOB.BTB.ENT.AMT.POS)
    RETURN
