$PACKAGE BD.Soc
*
* Implementation of BD.Soc.SocUPDATECHGINFO
*
* Y.SOC.INFO.ID(IN) :
* Y.BASE.BALANCE(IN) :
* Y.CHG.AMT(IN) :
* Y.VAT.AMT(IN) :
* Y.REL.CHG(IN) :
* Y.REL.VAT(IN) :
* Y.DUE.AMT(IN) :
* Y.DUE.VAT(IN) :
*
SUBROUTINE BD.SOC.UPDATE.CHGINFO(Y.SOC.INFO.ID, Y.BASE.BALANCE, Y.CHG.AMT, Y.VAT.AMT, Y.REL.CHG, Y.REL.VAT, Y.DUE.AMT, Y.DUE.VAT)

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.BD.SCHEDULE.CHARGE.INFO
   
    $USING EB.DataAccess
    
    GOSUB INIT
    GOSUB OPENFILES
    GOSUB PROCESS
RETURN
    
*****
INIT:
*****
    FN.CHGINFO='F.BD.SCHEDULE.CHARGE.INFO'
    F.CHGINFO=''
RETURN
**********
OPENFILES:
**********
    EB.DataAccess.Opf(FN.CHGINFO, F.CHGINFO)
RETURN

********
PROCESS:
********
    EB.DataAccess.FRead(FN.CHGINFO, Y.SOC.INFO.ID, R.CHGINFO, F.CHGINFO, ERR)
    Y.DCOUNT = DCOUNT(R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.BASE.BALANCE>,VM) + 1
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.BASE.BALANCE,Y.DCOUNT>=Y.BASE.BALANCE
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.CHARGE.AMOUNT,Y.DCOUNT>=Y.CHG.AMT
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.VAT.AMOUNT,Y.DCOUNT>=Y.VAT.AMT
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.REALIZE.AMOUNT,Y.DCOUNT>=Y.REL.CHG
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.REALIZE.VAT,Y.DCOUNT>=Y.REL.VAT
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.DUE.AMT,Y.DCOUNT>=Y.DUE.AMT
    R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.TOTAL.DUE.VAT,Y.DCOUNT>=Y.DUE.VAT
*----------------CHECKING IF THE DUE AMOUNT IS 0 OR NOT------------------
    IF Y.DUE.AMT EQ 0 THEN
        R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.STATUS,Y.DCOUNT>='FULL'
    END
    ELSE
        R.CHGINFO<BD.Soc.BdScheduleChargeInfo.SOC.INFO.STATUS,Y.DCOUNT>='PARTIAL'
    END
    WRITE R.CHGINFO ON F.CHGINFO, Y.SOC.INFO.ID
RETURN
